{
  "version": 3,
  "sources": ["../../../../../node_modules/.pnpm/@tinyslice+hydration-plugin@0.8.0/node_modules/@tinyslice/hydration-plugin/index.js"],
  "sourcesContent": ["import { isNotNullish } from \"@alexaegis/common\";\nimport { TINYSLICE_PREFIX } from \"@tinyslice/core\";\nimport { Subscription, debounceTime, tap } from \"rxjs\";\nconst DEFAULT_OPTIONS = {\n  trimmer: (state) => state,\n  migrations: [],\n  getter: (key) => {\n    const persistedState = localStorage.getItem(key);\n    return persistedState ? JSON.parse(persistedState) : void 0;\n  },\n  setter: (key, state) => {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem(key, serializedState);\n  },\n  remover: (key) => {\n    localStorage.removeItem(key);\n  },\n  debounceTime: 100\n};\nclass TinySliceHydrationPlugin {\n  constructor(localStorageKey, options) {\n    this.localStorageKey = localStorageKey;\n    this.options = {\n      ...DEFAULT_OPTIONS,\n      ...options\n    };\n    this.tryMigrations();\n  }\n  sink = new Subscription();\n  options;\n  hooks;\n  additionalTriggers = [];\n  pipeline;\n  runMigrations() {\n    let migrated = false;\n    for (const migration of this.options.migrations) {\n      const getter = migration.getter ?? this.options.getter;\n      const stateToBeMigrated = getter(migration.fromKey);\n      if (isNotNullish(stateToBeMigrated)) {\n        console.group(\n          `${TINYSLICE_PREFIX} Running migration from ${migration.fromKey} to ${migration.toKey}`\n        );\n        console.log(\"Migrating\", stateToBeMigrated);\n        try {\n          const stateToBeMigratedTo = getter(migration.toKey);\n          if (stateToBeMigratedTo) {\n            console.log(\"Merging...\", stateToBeMigratedTo);\n          }\n          const migratedState = migration.migrate(stateToBeMigrated, stateToBeMigratedTo);\n          const setter = migration.setter ?? this.options.setter;\n          setter(migration.toKey, migratedState);\n          const remover = migration.remover ?? this.options.remover;\n          remover(migration.fromKey);\n          migrated = true;\n          console.log(\"Migration finished!\", migratedState);\n        } catch (error) {\n          console.error(\"Migration error!\", error);\n        }\n        console.groupEnd();\n      }\n    }\n    return migrated;\n  }\n  tryMigrations() {\n    let migrated = true;\n    while (migrated) {\n      migrated = this.runMigrations();\n    }\n  }\n  retrieve() {\n    return this.options.getter(this.localStorageKey);\n  }\n  persist(snapshot) {\n    const trimmedState = this.options.trimmer(snapshot);\n    this.options.setter(this.localStorageKey, trimmedState);\n  }\n  register = (hooks) => {\n    this.hooks = hooks;\n    const retrievedState = this.retrieve();\n    if (retrievedState && (this.options.validateRetrieved?.(retrievedState) ?? true)) {\n      this.hooks.stateInjector(retrievedState);\n    }\n    this.pipeline = this.hooks.state$;\n    if (this.options.debounceTime) {\n      this.pipeline = this.pipeline.pipe(debounceTime(this.options.debounceTime));\n    }\n    this.pipeline = this.pipeline.pipe(\n      tap((state) => {\n        this.persist(state.nextState);\n      })\n    );\n  };\n  start = () => {\n    if (this.pipeline) {\n      this.sink.add(this.pipeline.subscribe());\n    }\n  };\n  stop = () => {\n    this.sink.unsubscribe();\n    this.sink = new Subscription();\n  };\n  registerAdditionalTrigger = (trigger) => {\n    this.additionalTriggers.push(trigger);\n  };\n}\nexport {\n  DEFAULT_OPTIONS,\n  TinySliceHydrationPlugin\n};\n"],
  "mappings": ";;;;;;;;;;;;;;AAGA,IAAM,kBAAkB;AAAA,EACtB,SAAS,CAAC,UAAU;AAAA,EACpB,YAAY,CAAC;AAAA,EACb,QAAQ,CAAC,QAAQ;AACf,UAAM,iBAAiB,aAAa,QAAQ,GAAG;AAC/C,WAAO,iBAAiB,KAAK,MAAM,cAAc,IAAI;AAAA,EACvD;AAAA,EACA,QAAQ,CAAC,KAAK,UAAU;AACtB,UAAM,kBAAkB,KAAK,UAAU,KAAK;AAC5C,iBAAa,QAAQ,KAAK,eAAe;AAAA,EAC3C;AAAA,EACA,SAAS,CAAC,QAAQ;AAChB,iBAAa,WAAW,GAAG;AAAA,EAC7B;AAAA,EACA,cAAc;AAChB;AACA,IAAM,2BAAN,MAA+B;AAAA,EAC7B,YAAY,iBAAiB,SAAS;AAQtC,gCAAO,IAAI,aAAa;AACxB;AACA;AACA,8CAAqB,CAAC;AACtB;AA4CA,oCAAW,CAAC,UAAU;AA5ExB;AA6EI,WAAK,QAAQ;AACb,YAAM,iBAAiB,KAAK,SAAS;AACrC,UAAI,qBAAmB,gBAAK,SAAQ,sBAAb,4BAAiC,oBAAmB,OAAO;AAChF,aAAK,MAAM,cAAc,cAAc;AAAA,MACzC;AACA,WAAK,WAAW,KAAK,MAAM;AAC3B,UAAI,KAAK,QAAQ,cAAc;AAC7B,aAAK,WAAW,KAAK,SAAS,KAAK,aAAa,KAAK,QAAQ,YAAY,CAAC;AAAA,MAC5E;AACA,WAAK,WAAW,KAAK,SAAS;AAAA,QAC5B,IAAI,CAAC,UAAU;AACb,eAAK,QAAQ,MAAM,SAAS;AAAA,QAC9B,CAAC;AAAA,MACH;AAAA,IACF;AACA,iCAAQ,MAAM;AACZ,UAAI,KAAK,UAAU;AACjB,aAAK,KAAK,IAAI,KAAK,SAAS,UAAU,CAAC;AAAA,MACzC;AAAA,IACF;AACA,gCAAO,MAAM;AACX,WAAK,KAAK,YAAY;AACtB,WAAK,OAAO,IAAI,aAAa;AAAA,IAC/B;AACA,qDAA4B,CAAC,YAAY;AACvC,WAAK,mBAAmB,KAAK,OAAO;AAAA,IACtC;AAlFE,SAAK,kBAAkB;AACvB,SAAK,UAAU;AAAA,MACb,GAAG;AAAA,MACH,GAAG;AAAA,IACL;AACA,SAAK,cAAc;AAAA,EACrB;AAAA,EAMA,gBAAgB;AACd,QAAI,WAAW;AACf,eAAW,aAAa,KAAK,QAAQ,YAAY;AAC/C,YAAM,SAAS,UAAU,UAAU,KAAK,QAAQ;AAChD,YAAM,oBAAoB,OAAO,UAAU,OAAO;AAClD,UAAI,aAAa,iBAAiB,GAAG;AACnC,gBAAQ;AAAA,UACN,GAAG,gBAAgB,2BAA2B,UAAU,OAAO,OAAO,UAAU,KAAK;AAAA,QACvF;AACA,gBAAQ,IAAI,aAAa,iBAAiB;AAC1C,YAAI;AACF,gBAAM,sBAAsB,OAAO,UAAU,KAAK;AAClD,cAAI,qBAAqB;AACvB,oBAAQ,IAAI,cAAc,mBAAmB;AAAA,UAC/C;AACA,gBAAM,gBAAgB,UAAU,QAAQ,mBAAmB,mBAAmB;AAC9E,gBAAM,SAAS,UAAU,UAAU,KAAK,QAAQ;AAChD,iBAAO,UAAU,OAAO,aAAa;AACrC,gBAAM,UAAU,UAAU,WAAW,KAAK,QAAQ;AAClD,kBAAQ,UAAU,OAAO;AACzB,qBAAW;AACX,kBAAQ,IAAI,uBAAuB,aAAa;AAAA,QAClD,SAAS,OAAO;AACd,kBAAQ,MAAM,oBAAoB,KAAK;AAAA,QACzC;AACA,gBAAQ,SAAS;AAAA,MACnB;AAAA,IACF;AACA,WAAO;AAAA,EACT;AAAA,EACA,gBAAgB;AACd,QAAI,WAAW;AACf,WAAO,UAAU;AACf,iBAAW,KAAK,cAAc;AAAA,IAChC;AAAA,EACF;AAAA,EACA,WAAW;AACT,WAAO,KAAK,QAAQ,OAAO,KAAK,eAAe;AAAA,EACjD;AAAA,EACA,QAAQ,UAAU;AAChB,UAAM,eAAe,KAAK,QAAQ,QAAQ,QAAQ;AAClD,SAAK,QAAQ,OAAO,KAAK,iBAAiB,YAAY;AAAA,EACxD;AA6BF;",
  "names": []
}
