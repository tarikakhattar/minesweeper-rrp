import "./chunk-37X55MN7.js";
import "./chunk-J5RLZWMP.js";
import {
  SvelteComponentDev,
  check_outros,
  create_slot,
  detach_dev,
  dispatch_dev,
  empty,
  get_all_dirty_from_scope,
  get_slot_changes,
  group_outros,
  init,
  insert_hydration_dev,
  onDestroy,
  safe_not_equal,
  transition_in,
  transition_out,
  update_slot_base,
  validate_slots
} from "./chunk-4PIMTYDJ.js";
import "./chunk-YU26TCF5.js";
import "./chunk-F3FYYIAV.js";

// ../../node_modules/.pnpm/svelte-rxjs-observer@0.5.1_rxjs@7.8.1/node_modules/svelte-rxjs-observer/lib/observer.svelte
var get_default_slot_changes = (dirty) => ({ next: dirty & /*next*/
4 });
var get_default_slot_context = (ctx) => ({ next: (
  /*next*/
  ctx[2]
) });
var get_pending_slot_changes = (dirty) => ({});
var get_pending_slot_context = (ctx) => ({});
var get_error_slot_changes = (dirty) => ({
  error: dirty & /*error*/
  8,
  last: dirty & /*next*/
  4
});
var get_error_slot_context = (ctx) => ({
  error: (
    /*error*/
    ctx[3]
  ),
  last: (
    /*next*/
    ctx[2]
  )
});
var get_completed_slot_changes = (dirty) => ({ last: dirty & /*next*/
4 });
var get_completed_slot_context = (ctx) => ({ last: (
  /*next*/
  ctx[2]
) });
function create_else_block(ctx) {
  let current;
  const default_slot_template = (
    /*#slots*/
    ctx[8].default
  );
  const default_slot = create_slot(
    default_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_default_slot_context
  );
  const block = {
    c: function create() {
      if (default_slot)
        default_slot.c();
    },
    l: function claim(nodes) {
      if (default_slot)
        default_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (default_slot) {
        default_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (default_slot) {
        if (default_slot.p && (!current || dirty & /*$$scope, next*/
        132)) {
          update_slot_base(
            default_slot,
            default_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              default_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_default_slot_changes
            ),
            get_default_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(default_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(default_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (default_slot)
        default_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(38:0) {:else}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let current;
  const pending_slot_template = (
    /*#slots*/
    ctx[8].pending
  );
  const pending_slot = create_slot(
    pending_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_pending_slot_context
  );
  const block = {
    c: function create() {
      if (pending_slot)
        pending_slot.c();
    },
    l: function claim(nodes) {
      if (pending_slot)
        pending_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (pending_slot) {
        pending_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (pending_slot) {
        if (pending_slot.p && (!current || dirty & /*$$scope*/
        128)) {
          update_slot_base(
            pending_slot,
            pending_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              pending_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_pending_slot_changes
            ),
            get_pending_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(pending_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(pending_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (pending_slot)
        pending_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(36:18) ",
    ctx
  });
  return block;
}
function create_if_block_1(ctx) {
  let current;
  const error_slot_template = (
    /*#slots*/
    ctx[8].error
  );
  const error_slot = create_slot(
    error_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_error_slot_context
  );
  const block = {
    c: function create() {
      if (error_slot)
        error_slot.c();
    },
    l: function claim(nodes) {
      if (error_slot)
        error_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (error_slot) {
        error_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (error_slot) {
        if (error_slot.p && (!current || dirty & /*$$scope, error, next*/
        140)) {
          update_slot_base(
            error_slot,
            error_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              error_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_error_slot_changes
            ),
            get_error_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(error_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(error_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (error_slot)
        error_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(34:16) ",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let current;
  const completed_slot_template = (
    /*#slots*/
    ctx[8].completed
  );
  const completed_slot = create_slot(
    completed_slot_template,
    ctx,
    /*$$scope*/
    ctx[7],
    get_completed_slot_context
  );
  const block = {
    c: function create() {
      if (completed_slot)
        completed_slot.c();
    },
    l: function claim(nodes) {
      if (completed_slot)
        completed_slot.l(nodes);
    },
    m: function mount(target, anchor) {
      if (completed_slot) {
        completed_slot.m(target, anchor);
      }
      current = true;
    },
    p: function update(ctx2, dirty) {
      if (completed_slot) {
        if (completed_slot.p && (!current || dirty & /*$$scope, next*/
        132)) {
          update_slot_base(
            completed_slot,
            completed_slot_template,
            ctx2,
            /*$$scope*/
            ctx2[7],
            !current ? get_all_dirty_from_scope(
              /*$$scope*/
              ctx2[7]
            ) : get_slot_changes(
              completed_slot_template,
              /*$$scope*/
              ctx2[7],
              dirty,
              get_completed_slot_changes
            ),
            get_completed_slot_context
          );
        }
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(completed_slot, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(completed_slot, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (completed_slot)
        completed_slot.d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(32:0) {#if completed}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let current_block_type_index;
  let if_block;
  let if_block_anchor;
  let current;
  const if_block_creators = [create_if_block, create_if_block_1, create_if_block_2, create_else_block];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*completed*/
      ctx2[0]
    )
      return 0;
    if (
      /*error*/
      ctx2[3]
    )
      return 1;
    if (
      /*pending*/
      ctx2[1]
    )
      return 2;
    return 3;
  }
  current_block_type_index = select_block_type(ctx, -1);
  if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  const block = {
    c: function create() {
      if_block.c();
      if_block_anchor = empty();
    },
    l: function claim(nodes) {
      if_block.l(nodes);
      if_block_anchor = empty();
    },
    m: function mount(target, anchor) {
      if_blocks[current_block_type_index].m(target, anchor);
      insert_hydration_dev(target, if_block_anchor, anchor);
      current = true;
    },
    p: function update(ctx2, [dirty]) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block = if_blocks[current_block_type_index];
        if (!if_block) {
          if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block.c();
        } else {
          if_block.p(ctx2, dirty);
        }
        transition_in(if_block, 1);
        if_block.m(if_block_anchor.parentNode, if_block_anchor);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching) {
        detach_dev(if_block_anchor);
      }
      if_blocks[current_block_type_index].d(detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("Observer", slots, ["completed", "error", "pending", "default"]);
  let { observable } = $$props;
  let { errorType = void 0 } = $$props;
  let completed = false;
  let pending = true;
  let next;
  let error;
  let subscription;
  onDestroy(() => subscription == null ? void 0 : subscription.unsubscribe());
  $$self.$$.on_mount.push(function() {
    if (observable === void 0 && !("observable" in $$props || $$self.$$.bound[$$self.$$.props["observable"]])) {
      console.warn("<Observer> was created without expected prop 'observable'");
    }
  });
  const writable_props = ["observable", "errorType"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<Observer> was created with unknown prop '${key}'`);
  });
  $$self.$$set = ($$props2) => {
    if ("observable" in $$props2)
      $$invalidate(5, observable = $$props2.observable);
    if ("errorType" in $$props2)
      $$invalidate(4, errorType = $$props2.errorType);
    if ("$$scope" in $$props2)
      $$invalidate(7, $$scope = $$props2.$$scope);
  };
  $$self.$capture_state = () => ({
    onDestroy,
    observable,
    errorType,
    completed,
    pending,
    next,
    error,
    subscription
  });
  $$self.$inject_state = ($$props2) => {
    if ("observable" in $$props2)
      $$invalidate(5, observable = $$props2.observable);
    if ("errorType" in $$props2)
      $$invalidate(4, errorType = $$props2.errorType);
    if ("completed" in $$props2)
      $$invalidate(0, completed = $$props2.completed);
    if ("pending" in $$props2)
      $$invalidate(1, pending = $$props2.pending);
    if ("next" in $$props2)
      $$invalidate(2, next = $$props2.next);
    if ("error" in $$props2)
      $$invalidate(3, error = $$props2.error);
    if ("subscription" in $$props2)
      $$invalidate(6, subscription = $$props2.subscription);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*subscription, observable*/
    96) {
      $: {
        $$invalidate(4, errorType = void 0);
        $$invalidate(0, completed = false);
        $$invalidate(1, pending = true);
        $$invalidate(3, error = void 0);
        $$invalidate(2, next = void 0);
        if (subscription) {
          subscription.unsubscribe();
        }
        $$invalidate(6, subscription = observable == null ? void 0 : observable.subscribe({
          next: (n) => {
            $$invalidate(2, next = n);
            $$invalidate(1, pending = false);
          },
          error: (e) => {
            $$invalidate(3, error = e);
          },
          complete: () => $$invalidate(0, completed = true)
        }));
      }
    }
  };
  return [
    completed,
    pending,
    next,
    error,
    errorType,
    observable,
    subscription,
    $$scope,
    slots
  ];
}
var Observer = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { observable: 5, errorType: 4 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "Observer",
      options,
      id: create_fragment.name
    });
  }
  get observable() {
    throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set observable(value) {
    throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get errorType() {
    throw new Error("<Observer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set errorType(value) {
    throw new Error("<Observer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var observer_default = Observer;

// ../../node_modules/.pnpm/svelte-rxjs-observer@0.5.1_rxjs@7.8.1/node_modules/svelte-rxjs-observer/lib/other/add.js
var add = (a, b) => a + b;
export {
  observer_default as Observer,
  add,
  observer_default as default
};
//# sourceMappingURL=svelte-rxjs-observer.js.map
