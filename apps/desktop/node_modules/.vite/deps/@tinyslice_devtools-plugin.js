import {
  Subscription,
  tap
} from "./chunk-NWFPIOKI.js";
import {
  __publicField
} from "./chunk-F3FYYIAV.js";

// ../../node_modules/.pnpm/@tinyslice+devtools-plugin@0.8.0/node_modules/@tinyslice/devtools-plugin/index.js
var DEFAULT_DEVTOOLS_OPTIONS = {
  name: "TinySlice"
};
var jsonUndefinedReplacer = (_key, value) => value ?? null;
var normalizeUndefined = (obj) => {
  const stringified = JSON.stringify(obj, jsonUndefinedReplacer);
  return JSON.parse(stringified);
};
var TinySliceDevtoolPlugin = class _TinySliceDevtoolPlugin {
  constructor(options) {
    __publicField(this, "extension");
    __publicField(this, "extensionConnection");
    __publicField(this, "sink", new Subscription());
    __publicField(this, "unsubscribeStateInjector");
    __publicField(this, "hooks");
    __publicField(this, "committedState");
    __publicField(this, "lastState");
    __publicField(this, "initialState");
    __publicField(this, "actionId", 0);
    __publicField(this, "actions", {});
    __publicField(this, "actionsTurnedOff", /* @__PURE__ */ new Set());
    __publicField(this, "additionalTriggers", []);
    __publicField(this, "registerAdditionalTrigger", (trigger) => {
      this.additionalTriggers.push(trigger);
    });
    __publicField(this, "register", (hooks) => {
      this.hooks = hooks;
      this.initialState = JSON.stringify(normalizeUndefined(hooks.initialState));
    });
    __publicField(this, "onError", (error) => {
      console.log("Error from store:", error);
    });
    __publicField(this, "start", () => {
      var _a;
      this.extensionConnection = (_a = this.extension) == null ? void 0 : _a.connect({
        ...DEFAULT_DEVTOOLS_OPTIONS,
        ...this.options
      });
      if (this.extensionConnection) {
        this.connect(this.extensionConnection);
      }
    });
    __publicField(this, "stop", () => {
      var _a, _b;
      this.sink.unsubscribe();
      (_a = this.unsubscribeStateInjector) == null ? void 0 : _a.call(this);
      (_b = this.extensionConnection) == null ? void 0 : _b.unsubscribe();
      if (this.extensionConnection) {
        this.disconnect();
      }
      this.sink = new Subscription();
    });
    this.options = options;
    this.extension = _TinySliceDevtoolPlugin.getExtension();
  }
  connect(connection) {
    this.lastState = this.initialState ? JSON.parse(this.initialState) : void 0;
    this.committedState = this.initialState;
    connection.init(this.lastState);
    this.sink.add(
      this.hooks.state$.pipe(
        tap(({ actionPacket, nextState }) => {
          this.lastState = normalizeUndefined(nextState);
          this.actions[this.actionId] = actionPacket;
          this.actionId += 1;
          connection.send(actionPacket, this.lastState);
        })
      ).subscribe()
    );
    this.unsubscribeStateInjector = connection.subscribe((message) => {
      var _a, _b;
      if (message.type === "DISPATCH") {
        switch ((_a = message.payload) == null ? void 0 : _a.type) {
          case "JUMP_TO_ACTION": {
            this.hooks.stateInjector(JSON.parse(message.state));
            break;
          }
          case "COMMIT": {
            console.log("COMMIT", this.lastState);
            if (this.lastState) {
              connection.init(this.lastState);
              this.committedState = JSON.stringify(this.lastState);
            } else {
              connection.error("Nothing to commit");
            }
            break;
          }
          case "ROLLBACK": {
            if (this.committedState) {
              const parsedCommittedState = JSON.parse(this.committedState);
              connection.init(parsedCommittedState);
              this.hooks.stateInjector(parsedCommittedState);
            } else {
              connection.error("No commit to rollback to");
            }
            break;
          }
          case "RESET": {
            const initialState = JSON.parse(this.initialState);
            this.hooks.stateInjector(initialState);
            connection.init(initialState);
            break;
          }
          case "IMPORT_STATE": {
            const computedStates = message.payload.nextLiftedState.computedStates;
            const actions = Object.values(message.payload.nextLiftedState.actionsById);
            const lastState = (_b = computedStates[actions.length - 1]) == null ? void 0 : _b.state;
            for (const [index, action] of actions.entries()) {
              const state = computedStates[index];
              if (state) {
                if (action.action.type === "@@INIT") {
                  connection.init(state.state);
                } else {
                  connection.send(action.action, state.state);
                }
              }
            }
            if (lastState) {
              this.hooks.stateInjector(lastState);
            }
            break;
          }
          case "TOGGLE_ACTION": {
            if (this.actionsTurnedOff.has(message.payload.id)) {
              this.actionsTurnedOff.delete(message.payload.id);
            } else {
              this.actionsTurnedOff.add(message.payload.id);
            }
            break;
          }
        }
      }
      for (const trigger of this.additionalTriggers)
        trigger();
    });
  }
  disconnect() {
    var _a;
    (_a = this.extension) == null ? void 0 : _a.disconnect();
  }
  error(error) {
    var _a;
    (_a = this.extensionConnection) == null ? void 0 : _a.error(error);
  }
  static getExtension() {
    return globalThis.__REDUX_DEVTOOLS_EXTENSION__;
  }
};
export {
  DEFAULT_DEVTOOLS_OPTIONS,
  TinySliceDevtoolPlugin
};
//# sourceMappingURL=@tinyslice_devtools-plugin.js.map
