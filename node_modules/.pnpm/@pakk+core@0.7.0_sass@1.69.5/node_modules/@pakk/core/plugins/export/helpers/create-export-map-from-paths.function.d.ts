import type { Defined } from '@alexaegis/common';
import type { EntryPathVariantMap } from '../export-map.type.js';
export interface CreateExportMapFromPathsOptions {
    /**
     * Where the paths were searched from, can be extended further using
     * the basepath.
     */
    srcDir: string;
    /**
     * Where the bundler will place the resulting files
     */
    outDir: string;
    /**
     * The directory where shims for the bins are placed
     */
    shimDir?: string;
    /**
     * A path every other path was search from, so in the result they will
     * be prefixed with this
     *
     * @defaultValue '.'
     */
    basePath?: string;
    /**
     * What kind of keys shall the resulting object contain?
     * - If set to 'extensionless-relative-path-from-base' then the keys will
     *   equal to the input paths minus the extension
     * - If set to 'extensionless-filename-only' then the keys will be set to
     *   the filename only.
     */
    keyKind: 'extensionless-relative-path-from-base' | 'extensionless-filename-only';
}
export type NormalizedCreateExportMapFromPathsOptions = Defined<CreateExportMapFromPathsOptions>;
/**
 * The resulting paths still contain their original extensions.
 */
export declare const createExportMapFromPaths: <Variants extends "development-to-source" | "development-to-dist" | "distribution-to-dist" | "development-to-shim" = "development-to-source" | "development-to-dist" | "distribution-to-dist" | "development-to-shim">(pathsFromBase: string[], options: CreateExportMapFromPathsOptions) => EntryPathVariantMap<Variants>;
//# sourceMappingURL=create-export-map-from-paths.function.d.ts.map