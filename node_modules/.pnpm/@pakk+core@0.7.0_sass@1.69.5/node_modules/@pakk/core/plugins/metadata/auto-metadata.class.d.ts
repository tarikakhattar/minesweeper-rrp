import { type Awaitable } from '@alexaegis/common';
import { type PackageJson, type WorkspacePackage } from '@alexaegis/workspace-tools';
import type { NormalizedPakkContext } from '../../internal/pakk.class.options.js';
import { type PackageJsonKindType } from '../../package-json/index.js';
import type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';
import { type AutoMetadataOptions } from './auto-metadata.class.options.js';
/**
 * Fills out packageJson fields of the distributed packageJson based on
 * either manually defined key-value pairs or a set of keys that then will
 * be read from the workspace packageJson file. Or both, in which case if a key
 * is defined in both the manual takes precedence.
 */
export declare class AutoMetadata implements PakkFeature {
    readonly order = 6;
    private readonly options;
    private readonly context;
    private metadataFromWorkspacePackageJson;
    constructor(context: NormalizedPakkContext, rawOptions?: AutoMetadataOptions);
    examinePackage(workspacePackage: WorkspacePackage): Awaitable<Partial<PackageExaminationResult>>;
    postprocess(workspacePackage: WorkspacePackage, packageJsonKind: PackageJsonKindType): PackageJson;
}
//# sourceMappingURL=auto-metadata.class.d.ts.map