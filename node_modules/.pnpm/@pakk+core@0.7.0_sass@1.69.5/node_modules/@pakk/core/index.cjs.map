{"version":3,"file":"index.cjs","sources":["../src/internal/defaults.const.ts","../src/package-json/package-json-kind.enum.ts","../src/package-json/package-json-export-target.enum.ts","../src/package-json/package-json-npm-hooks.const.ts","../src/plugins/export/helpers/strip-file-extension.function.ts","../src/plugins/export/helpers/create-export-map-from-paths.function.ts","../src/plugins/export/helpers/enter-path.function.ts","../src/plugins/bin/auto-bin.class.options.ts","../src/plugins/bin/helpers/normalize-package-name.function.ts","../src/plugins/bin/auto-bin.class.ts","../src/plugins/copy-license/auto-copy-license.class.ts","../src/plugins/directive/auto-directive.class.ts","../src/plugins/export-static/auto-export-static.class.options.ts","../src/plugins/export-static/auto-export-static.class.ts","../src/plugins/export/auto-export.class.options.ts","../src/plugins/export/auto-export.class.ts","../src/plugins/export/helpers/bundle-file-name.function.ts","../src/plugins/metadata/auto-metadata.class.options.ts","../src/plugins/metadata/auto-metadata.class.ts","../src/plugins/peer/auto-peer.class.ts","../src/plugins/sort-package-json/auto-sort-package-json.class.options.ts","../src/plugins/sort-package-json/auto-sort-package-json.class.ts","../src/internal/find-current-and-root-workspace-package.function.ts","../src/internal/pakk.class.options.ts","../src/internal/pakk.class.ts"],"sourcesContent":["import type { InternalModuleFormat } from 'rollup';\nimport type { LibraryFormats } from 'vite';\n\n/**\n * Where a bundler will place the built artifact, it is assumed that the\n * distributed packageJson file will be directly in this directory.\n */\nexport const DEFAULT_OUT_DIR = 'dist';\n\n/**\n * Where the source files are located in within a package\n */\nexport const DEFAULT_SRC_DIR = 'src';\n/**\n * Where bin entry points are located within the SRC directory\n */\nexport const DEFAULT_BIN_DIR = 'bin';\n/**\n * By default every valid entry is a bin in the bin directory\n */\nexport const DEFAULT_BIN_GLOB = '*';\n/**\n * Where to place automatic shims for bins, this is relative to the package\n * directory and should be outside of SRC as these files are excluded from\n * lints/typechecks etc.\n *\n * Their only purpose is to help package managers while developing a package.\n */\nexport const DEFAULT_BINSHIM_DIR = 'shims';\n\n/**\n * Which directory relative to SRC + EXPORT_BASEDIR should be treated where all files are\n * treated as the interface for your package. In this folder the index.ts/js\n * files are treated specially as your main entry points.\n *\n * By default everything is exported that is directly in this directory except\n * directories.\n */\nexport const DEFAULT_PACKAGE_EXPORTS = '*';\n\n/**\n * What directory should be considered the 'root' of the package. The 'index'\n * file in this directory will be treated as the main export of the package.\n *\n * By default this is '.' to leave src/index.ts as the main entry point.\n */\nexport const DEFAULT_PACKAGE_EXPORT_BASEDIR = '.';\n\n/**\n * By default the exports map won't contain test files.\n */\nexport const DEFAULT_PACKAGE_EXPORT_IGNORES = ['*.(spec|test).*'];\n\n/**\n * What files should be just copied over to the DIST directory as is and also\n * export them.\n */\nexport const DEFAULT_STATIC_EXPORT_GLOBS = ['readme.md', 'static/**/*', 'export/**/*'];\n\n/**\n * What formats to expect to be built by default\n */\nexport const DEFAULT_EXPORT_FORMATS: LibraryFormats[] = ['es', 'cjs'];\n\nexport const ALL_ROLLUP_MODULE_FORMATS: readonly InternalModuleFormat[] = [\n\t'es',\n\t'cjs',\n\t'amd',\n\t'umd',\n\t'iife',\n\t'system',\n] as const;\n\nexport const ALL_VITE_LIBRARY_FORMATS: readonly LibraryFormats[] = [\n\t'es',\n\t'cjs',\n\t'umd',\n\t'iife',\n] as const;\n","/**\n * These are the kinds of packageJson files we distinguish. The on you interact\n * with during DEVELOPMENT is the source packageJson file, and will be\n * transformed prior to DISTRIBUTION.\n */\nexport const PACKAGE_JSON_KIND = {\n\t/**\n\t * Used in the repository as the source packageJson\n\t */\n\tDEVELOPMENT: 'development',\n\t/**\n\t * The packageJson that will be in the distributed package\n\t */\n\tDISTRIBUTION: 'distribution',\n} as const;\n\n/**\n * @deprecated use common\n */\nexport type ValuesOf<T> = T[keyof T];\n\nexport type PackageJsonKindType = ValuesOf<typeof PACKAGE_JSON_KIND>;\n\nexport const isPackageJsonKindType = (s: string): s is PackageJsonKindType => {\n\treturn Object.values(PACKAGE_JSON_KIND).includes(s as PackageJsonKindType);\n};\n","/**\n * These are the kinds of paths the entries in a packageJson's exports object\n * can point to.\n *\n * It is only used for the development/source packageJson. The distributed\n * packageJson will only have paths that refer to itself.\n */\nexport enum PackageJsonExportTarget {\n\t/**\n\t * This targets the source files.\n\t *\n\t * For example the `development` packageJson targets the local entry points\n\t * for types\n\t */\n\tSOURCE = 'source',\n\t/**\n\t * This targets the directory where compiled files end up in. Wherever\n\t * `outDir` points to.\n\t *\n\t * For example both the `development` and `distribution` packageJson files\n\t * target this for the actual imports.\n\t */\n\tDIST = 'dist',\n\t/**\n\t * The shim folder is used for local bins\n\t *\n\t * For example the `development` packageJson files bin entries target the\n\t * shim directory. So pnpm can link them event before the package is built.\n\t */\n\tSHIM = 'shim',\n}\n\nexport type PathMap<T extends string> = Record<string, Record<T, string>>;\n","/**\n * The hooks pnpm too will use.\n */\nexport const NPM_INSTALL_HOOKS = [\n\t'preinstall',\n\t'install',\n\t'postinstall',\n\t'prepublish',\n\t'preprepare',\n\t'prepare',\n\t'postprepare',\n];\n\n/**\n * From https://docs.npmjs.com/cli/v8/using-npm/scripts\n * And anything that start pre- and post- that also matches a user defined\n * script (prebuild and postbuild works if 'build' exists)\n */\nexport const ALL_NPM_HOOKS = [\n\t...NPM_INSTALL_HOOKS,\n\t'prepare',\n\t'prepack',\n\t'postpack',\n\t'prepublishOnly',\n\t'publish',\n\t'postpublish',\n\t'prerestart',\n\t'restart',\n\t'postrestart',\n];\n","import { extname } from 'node:path';\n\nconst dtsExtension = '.d.ts';\n\n/**\n * Removes extensions from filenames. Which is usually whatever `extname`\n * returns (everything after the last `.`) but in the case of `.d.ts` files,\n * it will strip `.d.ts` by default, unless turned off.\n */\nexport const stripFileExtension = (name: string, options?: { stripDts: boolean }): string => {\n\tconst extension =\n\t\tname.endsWith(dtsExtension) && options?.stripDts !== false ? dtsExtension : extname(name);\n\treturn name.replace(new RegExp(`${extension}$`), '');\n};\n","import type { Defined } from '@alexaegis/common';\nimport { basename, join, posix } from 'node:path';\nimport type { AllBinPathCombinations } from '../../bin/auto-bin.class.js';\nimport type { AllExportPathCombinations } from '../auto-export.class.js';\nimport type { EntryPathVariantMap, PathVariantMap } from '../export-map.type.js';\nimport { stripFileExtension } from './strip-file-extension.function.js';\n\nexport interface CreateExportMapFromPathsOptions {\n\t/**\n\t * Where the paths were searched from, can be extended further using\n\t * the basepath.\n\t */\n\tsrcDir: string;\n\n\t/**\n\t * Where the bundler will place the resulting files\n\t */\n\toutDir: string;\n\n\t/**\n\t * The directory where shims for the bins are placed\n\t */\n\tshimDir?: string;\n\n\t/**\n\t * A path every other path was search from, so in the result they will\n\t * be prefixed with this\n\t *\n\t * @defaultValue '.'\n\t */\n\tbasePath?: string;\n\n\t/**\n\t * What kind of keys shall the resulting object contain?\n\t * - If set to 'extensionless-relative-path-from-base' then the keys will\n\t *   equal to the input paths minus the extension\n\t * - If set to 'extensionless-filename-only' then the keys will be set to\n\t *   the filename only.\n\t */\n\tkeyKind: 'extensionless-relative-path-from-base' | 'extensionless-filename-only';\n}\n\nexport type NormalizedCreateExportMapFromPathsOptions = Defined<CreateExportMapFromPathsOptions>;\n\n/**\n * The resulting paths still contain their original extensions.\n */\nexport const createExportMapFromPaths = <\n\tVariants extends AllExportPathCombinations | AllBinPathCombinations =\n\t\t| AllExportPathCombinations\n\t\t| AllBinPathCombinations,\n>(\n\tpathsFromBase: string[],\n\toptions: CreateExportMapFromPathsOptions,\n): EntryPathVariantMap<Variants> => {\n\tconst basePath = options.basePath ?? '.';\n\tconst exportMap: EntryPathVariantMap<Variants> = {};\n\n\tfor (const path of pathsFromBase) {\n\t\tconst key =\n\t\t\toptions.keyKind === 'extensionless-filename-only'\n\t\t\t\t? stripFileExtension(basename(path))\n\t\t\t\t: './' + stripFileExtension(path);\n\n\t\tconst pathVariants: Record<string, string> = {\n\t\t\t'development-to-source': './' + posix.join(options.srcDir, basePath, path), // The original full path, not used by default but there's an option if preferred\n\t\t\t'development-to-dist': './' + posix.join(options.outDir, path), // It is assumed that files in the outDir replicate their folder structure from the srcDir\n\t\t\t'distribution-to-dist': './' + path,\n\t\t};\n\n\t\tif (options.shimDir) {\n\t\t\tpathVariants['development-to-shim'] = './' + join(options.shimDir, path);\n\t\t}\n\n\t\texportMap[key] = pathVariants as PathVariantMap<Variants>;\n\t}\n\n\treturn exportMap;\n};\n","import { posix } from 'node:path';\n\n/**\n * Moves one directory in into a path. It strips one directory off from\n * the beginning. if it started with a `./` it keeps it and strips the next\n * section off.\n *\n * @example 'foo/bar/file' => 'bar/file'\n */\nexport const enterPathPosix = (path: string, enterCount = 1): string => {\n\tconst explodedPath = posix.normalize(path).split(posix.sep);\n\tconst directoryCount = explodedPath.length - 1;\n\texplodedPath.splice(0, Math.min(enterCount, directoryCount));\n\tconst prefix = path.startsWith('./') ? './' : '';\n\treturn prefix + posix.join(...explodedPath);\n};\n","import type { Defined } from '@alexaegis/common';\nimport {\n\tDEFAULT_BINSHIM_DIR,\n\tDEFAULT_BIN_DIR,\n\tDEFAULT_BIN_GLOB,\n\tDEFAULT_PACKAGE_EXPORT_IGNORES,\n} from '../../internal/defaults.const.js';\nimport { ALL_NPM_HOOKS } from '../../package-json/package-json-npm-hooks.const.js';\n\nexport interface AutoBinOptions {\n\t/**\n\t * ### AutoBin\n\t *\n\t * The files to treat as bins elative from the `srcDir + binBaseDir`\n\t * directory.\n\t * It's usually `*` meaning all files directly here are considered the\n\t * entry points of the library.\n\t *\n\t * @defaultValue '*'\n\t */\n\tbins?: string | string[] | undefined;\n\n\t/**\n\t * ### AutoBin\n\t *\n\t * What paths to ignore when collecting bins in addition to\n\t * `defaultBinIgnore` so you're not dropping the defaults when you just\n\t * want to add additional ignore entries.\n\t *\n\t * @defaultValue []\n\t */\n\tbinIgnore?: string[] | undefined;\n\n\t/**\n\t * ### AutoBin\n\t *\n\t * By default test files are excluded\n\t *\n\t * @defaultValue ['*.(spec|test).*']\n\t */\n\tdefaultBinIgnore?: string[] | undefined;\n\n\t/**\n\t * ### AutoBin\n\t *\n\t * Relative path from `srcDir` if you want your exports to start from a\n\t * different directory.\n\t *\n\t * @defaultValue 'bin'\n\t */\n\tbinBaseDir?: string | undefined;\n\n\t/**\n\t * ### AutoBin\n\t *\n\t * If a bin's name matches with an entry here (which is by default every\n\t * NPM hook, 'postinstall' 'prebuild' etc.) then it will be automatically\n\t * added to your packageJson file's scripts. To not interfere with\n\t * development, hooks invoked during install are disabled for the source\n\t * packageJson and are only avilable in the distributed packageJson.\n\t *\n\t * @defaultValue ALL_NPM_HOOKS\n\t */\n\tenabledNpmHooks?: string[] | undefined;\n\n\t/**\n\t * ### AutoBin\n\t *\n\t * A directory where shims for the built bins would be placed\n\t * All these scripts do is to import the yet-to-be-built binary so\n\t * package managers hava something to symlink to before it's built.\n\t *\n\t * ! This folder has to be ignored by typescript as it contains broken\n\t * ! imports before the package is built\n\t *\n\t * @defaultValue 'shims'\n\t */\n\tshimDir?: string | undefined;\n}\n\nexport type NormalizedAutoBinOptions = Defined<AutoBinOptions>;\n\nexport const normalizeAutoBinOptions = (options?: AutoBinOptions): NormalizedAutoBinOptions => {\n\treturn {\n\t\tbinBaseDir: options?.binBaseDir ?? DEFAULT_BIN_DIR,\n\t\tbins: options?.bins ?? DEFAULT_BIN_GLOB,\n\t\tshimDir: options?.shimDir ?? DEFAULT_BINSHIM_DIR,\n\t\tdefaultBinIgnore: options?.defaultBinIgnore ?? DEFAULT_PACKAGE_EXPORT_IGNORES,\n\t\tbinIgnore: options?.binIgnore ?? [],\n\t\tenabledNpmHooks: options?.enabledNpmHooks ?? ALL_NPM_HOOKS,\n\t};\n};\n","/**\n * Takes out the @ in front of a packageName and replaces / with a -\n */\nexport const normalizePackageName = (packageName: string | undefined): string => {\n\treturn packageName?.replace(/^@/, '')?.replace('/', '-') ?? '';\n};\n","import { getPrettierFormatter, toAbsolute, turnIntoExecutable } from '@alexaegis/fs';\nimport {\n\tgetPackageJsonTemplateVariables,\n\ttype PackageJson,\n\ttype WorkspacePackage,\n} from '@alexaegis/workspace-tools';\n\nimport { existsSync } from 'node:fs';\nimport { mkdir, readFile, rename, rm, symlink, writeFile } from 'node:fs/promises';\nimport posix, { basename, dirname, join, relative } from 'node:path/posix';\nimport type { InternalModuleFormat } from 'rollup';\n\nimport type { SimpleObjectKey } from '@alexaegis/common';\nimport { globby } from 'globby';\nimport type { NormalizedPakkContext, ViteFileNameFn } from '../../index.js';\nimport {\n\tNPM_INSTALL_HOOKS,\n\tPACKAGE_JSON_KIND,\n\tPackageJsonExportTarget,\n\ttype PathMap,\n} from '../../package-json/index.js';\nimport type { PackageExportPathContext } from '../export/auto-export.class.js';\nimport { createExportMapFromPaths } from '../export/helpers/create-export-map-from-paths.function.js';\nimport { enterPathPosix } from '../export/helpers/enter-path.function.js';\nimport { stripFileExtension } from '../export/helpers/strip-file-extension.function.js';\nimport type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';\nimport {\n\tnormalizeAutoBinOptions,\n\ttype AutoBinOptions,\n\ttype NormalizedAutoBinOptions,\n} from './auto-bin.class.options.js';\nimport { normalizePackageName } from './helpers/normalize-package-name.function.js';\n\n/**\n * TODO: use the one in core\n */\nconst mapObject = <T extends Record<SimpleObjectKey, unknown>, K>(\n\to: T,\n\tmap: (value: T[keyof T], key: keyof T) => K,\n): Record<keyof T, K> => {\n\treturn Object.fromEntries(\n\t\tObject.entries(o).map(([key, value]) => {\n\t\t\treturn [key, map(value as T[keyof T], key)];\n\t\t}),\n\t) as Record<keyof T, K>;\n};\n\nexport const allBinPathCombinations = [\n\t`${PACKAGE_JSON_KIND.DEVELOPMENT}-to-${PackageJsonExportTarget.SOURCE}`,\n\t`${PACKAGE_JSON_KIND.DEVELOPMENT}-to-${PackageJsonExportTarget.DIST}`,\n\t`${PACKAGE_JSON_KIND.DISTRIBUTION}-to-${PackageJsonExportTarget.DIST}`,\n\t`${PACKAGE_JSON_KIND.DEVELOPMENT}-to-${PackageJsonExportTarget.SHIM}`,\n] as const;\n\nexport const mapPathMapToFormat = (\n\tbinPaths: PathMap<string>,\n\tformat: InternalModuleFormat | 'SOURCE',\n\tfileNameFn: ViteFileNameFn,\n): BinPathMap => {\n\treturn mapObject(binPaths, (kindsOfPaths, _binName) => {\n\t\treturn mapObject(kindsOfPaths, (path, _pathKind) => {\n\t\t\tconst fileName = basename(path);\n\t\t\tconst extensionlessFileName = stripFileExtension(fileName);\n\t\t\tconst dir = dirname(path);\n\t\t\treturn posix.join(\n\t\t\t\tdir,\n\t\t\t\tformat === 'SOURCE' ? fileName : fileNameFn(format, extensionlessFileName),\n\t\t\t);\n\t\t});\n\t});\n};\n\n/**\n * BinPaths never point into the nothing. Dist points to dist but source only\n * points to a shim generated by AutoBin not to confuse package managers when\n * an unbuilt package is installed locally. The shim will be there for them.\n * The shim will not be usable until the package is built though.\n *\n * TODO: generate shims that can self trigger builds when called and not built\n */\nexport type AllBinPathCombinations = (typeof allBinPathCombinations)[number];\n\nexport type BinPathMap = PathMap<AllBinPathCombinations>;\n\nconst markComment = ' # autogenerated';\n\n/**\n * Generates bin entries from files under `srcDir` + `autoBinDirectory`\n * It also treats all files named as npm hooks as npm hooks, prefixing them\n * and adding them as hooks for the npm artifact\n *\n * For example a file called `postinstall.ts` in a package called\n * `@org/name`, it will generate an npm script entry as such:\n * `\"postinstall\": \"bin/postinstall.js\"`. The hook is still treated as a\n * `bin` so you can invoke it directly. To avoid name collisions, all\n * \"hookbins\" are prefixed with the normalized packagename like so:\n * `org-name-postinstall`\n *\n * For a simpler packageJson, directories.bin could also be used in\n * https://docs.npmjs.com/cli/v9/configuring-npm/package-json#directories\n */\nexport class AutoBin implements PakkFeature {\n\tpublic readonly order = 3;\n\n\tprivate readonly options: NormalizedAutoBinOptions;\n\tprivate readonly context: NormalizedPakkContext;\n\n\tprivate outDirAbs: string;\n\tprivate shimDirAbs: string;\n\tprivate outBinDirAbs: string;\n\n\tprivate binPathMap: BinPathMap = {};\n\tprivate existingManualBinEntries: Record<string, string> = {};\n\n\tconstructor(context: NormalizedPakkContext, options?: AutoBinOptions) {\n\t\tthis.options = normalizeAutoBinOptions(options);\n\t\tthis.context = context;\n\n\t\tthis.outDirAbs = toAbsolute(this.context.outDir, this.context);\n\t\tthis.shimDirAbs = join(this.context.cwd, this.options.shimDir);\n\t\tthis.outBinDirAbs = join(this.outDirAbs, this.options.binBaseDir);\n\t}\n\n\tprivate collectManualBinEntries(workspacePackage: WorkspacePackage): Record<string, string> {\n\t\treturn Object.fromEntries(\n\t\t\tObject.entries(workspacePackage.packageJson.bin ?? {}).filter(\n\t\t\t\t([, path]) =>\n\t\t\t\t\t!path.startsWith('.' + posix.sep + posix.normalize(this.options.shimDir)) ||\n\t\t\t\t\t!path.endsWith('js') ||\n\t\t\t\t\tpath.includes('manual'),\n\t\t\t),\n\t\t);\n\t}\n\n\tasync examinePackage(\n\t\tworkspacePackage: WorkspacePackage,\n\t): Promise<Partial<PackageExaminationResult>> {\n\t\tthis.existingManualBinEntries = this.collectManualBinEntries(workspacePackage);\n\t\tthis.context.logger.trace('existingManualBinEntries', this.existingManualBinEntries);\n\n\t\tconst absoluteBinBaseDir = toAbsolute(join(this.context.srcDir, this.options.binBaseDir), {\n\t\t\tcwd: workspacePackage.packagePath,\n\t\t});\n\n\t\tconst binFiles = await globby(this.options.bins, {\n\t\t\tcwd: absoluteBinBaseDir,\n\t\t\tignore: [...this.options.binIgnore, ...this.options.defaultBinIgnore],\n\t\t\tonlyFiles: true,\n\t\t\tdot: true,\n\t\t});\n\n\t\tthis.binPathMap = createExportMapFromPaths(binFiles, {\n\t\t\toutDir: this.context.outDir,\n\t\t\tshimDir: this.options.shimDir,\n\t\t\tsrcDir: this.context.srcDir,\n\t\t\tbasePath: this.options.binBaseDir,\n\t\t\tkeyKind: 'extensionless-filename-only',\n\t\t});\n\t\tfor (const binPath of binFiles) {\n\t\t\tconst binName = stripFileExtension(basename(binPath));\n\n\t\t\tthis.binPathMap[binName] = {\n\t\t\t\t'development-to-source': join(\n\t\t\t\t\tthis.context.srcDir,\n\t\t\t\t\tthis.options.binBaseDir,\n\t\t\t\t\tbinPath,\n\t\t\t\t),\n\t\t\t\t'development-to-dist': join(this.context.outDir, this.options.binBaseDir, binPath),\n\t\t\t\t'distribution-to-dist': join(this.options.binBaseDir, binPath),\n\t\t\t\t'development-to-shim': join(this.options.shimDir, binPath),\n\t\t\t};\n\t\t}\n\n\t\tconst packageJsonUpdates: PackageJson = {};\n\n\t\t// Making sure removed bins and scripts will be dropped at the end\n\t\tpackageJsonUpdates.bin = undefined;\n\t\tfor (const script in packageJsonUpdates.scripts) {\n\t\t\tif (packageJsonUpdates.scripts[script]?.endsWith(markComment)) {\n\t\t\t\tpackageJsonUpdates.scripts[script] = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tpackageJsonUpdates,\n\t\t\tbundlerEntryFiles: binFiles.reduce<Record<string, string>>((acc, binFile) => {\n\t\t\t\tconst path = posix.join(this.context.srcDir, this.options.binBaseDir, binFile);\n\t\t\t\tconst alias = posix.join(this.options.binBaseDir, stripFileExtension(binFile));\n\t\t\t\tacc[alias] = path;\n\t\t\t\treturn acc;\n\t\t\t}, {}),\n\t\t};\n\t}\n\n\t/**\n\t * for module based packages, bins are modules too and the adjust path\n\t * step only acts for the 'es' format\n\t */\n\tasync process(\n\t\tpackageJson: PackageJson,\n\t\tpathContext: PackageExportPathContext,\n\t): Promise<PackageJson | undefined> {\n\t\tif (this.context.primaryFormat === pathContext.format) {\n\t\t\tconst binPathMapForFormat = mapPathMapToFormat(\n\t\t\t\tthis.binPathMap,\n\t\t\t\tthis.context.primaryFormat,\n\t\t\t\tthis.context.fileName,\n\t\t\t);\n\n\t\t\tconst packageName = normalizePackageName(packageJson.name);\n\n\t\t\tawait this.ensureEsmBinEntriesRenamed();\n\n\t\t\tif (pathContext.packageJsonKind === PACKAGE_JSON_KIND.DEVELOPMENT) {\n\t\t\t\tawait this.createShims(\n\t\t\t\t\tObject.values(binPathMapForFormat).map(\n\t\t\t\t\t\t(pathKinds) => pathKinds['development-to-shim'],\n\t\t\t\t\t),\n\t\t\t\t\tthis.context.primaryFormat,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// Mark all bins and shims as executable\n\t\t\tawait Promise.allSettled(\n\t\t\t\tObject.values(binPathMapForFormat)\n\t\t\t\t\t.flatMap((pathKinds) => [\n\t\t\t\t\t\tpathKinds['development-to-dist'],\n\t\t\t\t\t\tpathKinds['development-to-shim'],\n\t\t\t\t\t])\n\t\t\t\t\t.filter((executable) => existsSync(executable))\n\t\t\t\t\t.map((executable) =>\n\t\t\t\t\t\tturnIntoExecutable(executable, {\n\t\t\t\t\t\t\tcwd: this.context.cwd,\n\t\t\t\t\t\t\tlogger: this.context.logger,\n\t\t\t\t\t\t}),\n\t\t\t\t\t),\n\t\t\t);\n\n\t\t\tawait this.preLink(\n\t\t\t\tmapObject(binPathMapForFormat, (pathKinds) => pathKinds['development-to-dist']),\n\t\t\t\tpackageName,\n\t\t\t);\n\n\t\t\tconst update = Object.entries(binPathMapForFormat).reduce<PackageJson>(\n\t\t\t\t(result, [key, value]) => {\n\t\t\t\t\tif (result.scripts && this.options.enabledNpmHooks.includes(key)) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!packageJson.scripts?.[key] ||\n\t\t\t\t\t\t\tpackageJson.scripts[key]?.endsWith(markComment)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tif (pathContext.packageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION) {\n\t\t\t\t\t\t\t\tresult.scripts[key] = value['distribution-to-dist'] + markComment; // before update\n\t\t\t\t\t\t\t} else if (NPM_INSTALL_HOOKS.includes(key)) {\n\t\t\t\t\t\t\t\t// Disable local postinstall hooks\n\t\t\t\t\t\t\t\tresult.scripts[key] =\n\t\t\t\t\t\t\t\t\t'# local install hooks are disabled' + markComment;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Otherwise just point to the shim\n\t\t\t\t\t\t\t\tresult.scripts[key] = value['development-to-shim'] + markComment; // before update\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Hooks are renamed to avoid conflicts, except for their scripts\n\t\t\t\t\t\tkey = packageName + '-' + key;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key.endsWith('index')) {\n\t\t\t\t\t\tkey = key.replace('index', '');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (key === '') {\n\t\t\t\t\t\tconst packageJsonName = getPackageJsonTemplateVariables(packageJson);\n\t\t\t\t\t\tkey = packageJsonName.packageNameWithoutOrg;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!result.bin) {\n\t\t\t\t\t\tresult.bin = {};\n\t\t\t\t\t}\n\n\t\t\t\t\t// the distributed build artifacts bins point to the built bins\n\t\t\t\t\t// otherwise, the bins are pointing to their shims\n\t\t\t\t\tresult.bin[key] =\n\t\t\t\t\t\t'.' +\n\t\t\t\t\t\tposix.sep +\n\t\t\t\t\t\t(pathContext.packageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION\n\t\t\t\t\t\t\t? value['distribution-to-dist']\n\t\t\t\t\t\t\t: value['development-to-shim']);\n\n\t\t\t\t\treturn result;\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbin: this.existingManualBinEntries,\n\t\t\t\t\tscripts: {},\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (typeof update.bin === 'object' && Object.keys(update.bin).length === 0) {\n\t\t\t\tdelete update.bin;\n\t\t\t}\n\n\t\t\tif (typeof update.scripts === 'object' && Object.keys(update.scripts).length === 0) {\n\t\t\t\tdelete update.scripts;\n\t\t\t}\n\n\t\t\treturn [{ bin: undefined }, update];\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\t/**\n\t * Ensures shimDir exists and creates simple javascript files that are\n\t * importing their counterpart from `outDir`\n\t */\n\tprivate async createShims(shimPaths: string[], format: InternalModuleFormat): Promise<void> {\n\t\tif (\n\t\t\t(this.context.packageType === 'module' && format === 'es') ||\n\t\t\t(this.context.packageType === 'commonjs' && format !== 'es')\n\t\t) {\n\t\t\tthis.context.logger.info(\n\t\t\t\t`Creating shims for bins in ${format}/${this.context.packageType} format`,\n\t\t\t);\n\t\t\t// Clean up\n\t\t\tawait rm(this.shimDirAbs, { force: true, recursive: true });\n\n\t\t\tconst shimDirToOutBin = relative(this.shimDirAbs, this.outBinDirAbs);\n\t\t\tconst formatJs = await getPrettierFormatter();\n\n\t\t\t// check writable shim files\n\t\t\tconst shimPathsToMake = await Promise.all(\n\t\t\t\tshimPaths.map((path) =>\n\t\t\t\t\treadFile(toAbsolute(path, this.context), {\n\t\t\t\t\t\tencoding: 'utf8',\n\t\t\t\t\t})\n\t\t\t\t\t\t.then((content) =>\n\t\t\t\t\t\t\tcontent.includes('// autogenerated') ? path : undefined,\n\t\t\t\t\t\t)\n\t\t\t\t\t\t.catch(() => path),\n\t\t\t\t),\n\t\t\t).then((results) => results.filter((result): result is string => result !== undefined));\n\n\t\t\tif (shimPathsToMake.length > 0) {\n\t\t\t\tthis.context.logger.info(`create shims for ${shimPathsToMake.join('; ')}`);\n\n\t\t\t\tawait Promise.allSettled(\n\t\t\t\t\tshimPathsToMake.map(async (path) => {\n\t\t\t\t\t\tconst outBinPath = enterPathPosix(path, 1);\n\t\t\t\t\t\t//const outBinPath = path;\n\t\t\t\t\t\tconst builtBinFromShims = shimDirToOutBin + posix.sep + outBinPath;\n\t\t\t\t\t\tconst formattedESShimContent = await formatJs(\n\t\t\t\t\t\t\t`// autogenerated-by-pakk\nexport * from '${builtBinFromShims}';\n`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tconst formattedCJSShimContent = await formatJs(\n\t\t\t\t\t\t\t`// autogenerated-by-pakk, as seen from tsc\n/* eslint-disable unicorn/prefer-module */\n/* eslint-disable @typescript-eslint/no-var-requires */\n/* eslint-disable no-prototype-builtins */\nvar __createBinding = function(o, m, k, k2) {\n\tif (k2 === undefined) k2 = k;\n\tObject.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\n};\n\nvar __exportStar = function(m, exports) {\n\tfor (var p in m) if (p !== 'default' && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);\n};\n\n__exportStar(require('${builtBinFromShims}'), exports);\n`,\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tconst shimPathAbs = join(this.shimDirAbs, outBinPath);\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait mkdir(dirname(shimPathAbs), { recursive: true });\n\t\t\t\t\t\t\tawait writeFile(\n\t\t\t\t\t\t\t\tshimPathAbs,\n\t\t\t\t\t\t\t\tformat === 'es' ? formattedESShimContent : formattedCJSShimContent,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tthis.context.logger.error(\n\t\t\t\t\t\t\t\t\"Couldn't write\",\n\t\t\t\t\t\t\t\tshimPathAbs,\n\t\t\t\t\t\t\t\t'error happened',\n\t\t\t\t\t\t\t\terror,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ensures that all .js files in the dist folder are renamed to the\n\t * expected name this plugin added them to the bin entry.\n\t */\n\tprivate async ensureEsmBinEntriesRenamed(): Promise<void> {\n\t\tif (this.context.packageType === 'module') {\n\t\t\tconst esBinPathsMap = mapPathMapToFormat(this.binPathMap, 'es', this.context.fileName);\n\t\t\tconst data = Object.entries(esBinPathsMap).flatMap(([_binName, binPath]) => {\n\t\t\t\tconst extensionlessPath = stripFileExtension(binPath['development-to-dist']);\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tbinPath: extensionlessPath + '.js',\n\t\t\t\t\t\tnewBinPath: binPath['development-to-dist'],\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tbinPath: extensionlessPath + '.js.map',\n\t\t\t\t\t\tnewBinPath: binPath['development-to-dist'] + '.map',\n\t\t\t\t\t},\n\t\t\t\t];\n\t\t\t});\n\n\t\t\tawait Promise.all(\n\t\t\t\tdata\n\t\t\t\t\t.filter(({ binPath }) => existsSync(binPath))\n\t\t\t\t\t.map(({ binPath, newBinPath }) =>\n\t\t\t\t\t\trename(binPath, newBinPath).catch(() => false),\n\t\t\t\t\t),\n\t\t\t);\n\t\t}\n\t}\n\n\t// TODO: something is funky, there are extensionless files in the distbin dir and they are not executable.\n\t/**\n\t *\n\t */\n\tprivate async preLink(binRecord: Record<string, string>, packageName: string): Promise<void> {\n\t\tconst workspaceBinDirectoryPath = join(\n\t\t\tthis.context.rootWorkspacePackage.packagePath,\n\t\t\t'node_modules',\n\t\t\t'.bin',\n\t\t);\n\n\t\tconst packageBinDirectoryPath = toAbsolute(join('node_modules', '.bin'), this.context);\n\n\t\tconst symlinksToMake = Object.entries(binRecord).flatMap(([binName, binPath]) => {\n\t\t\tif (this.options.enabledNpmHooks.includes(binName)) {\n\t\t\t\tbinName = packageName + '-' + binName;\n\t\t\t}\n\n\t\t\treturn [\n\t\t\t\tjoin(workspaceBinDirectoryPath, binName),\n\t\t\t\tjoin(packageBinDirectoryPath, binName),\n\t\t\t].map((targetFilePath) => {\n\t\t\t\tconst relativeFromTargetBackToFile = relative(dirname(targetFilePath), binPath);\n\t\t\t\treturn { relativeFromTargetBackToFile, targetFilePath };\n\t\t\t});\n\t\t});\n\n\t\tawait Promise.all(\n\t\t\tsymlinksToMake.map(async ({ targetFilePath, relativeFromTargetBackToFile }) => {\n\t\t\t\ttry {\n\t\t\t\t\tawait symlink(relativeFromTargetBackToFile, targetFilePath);\n\t\t\t\t\tthis.context.logger.info(\n\t\t\t\t\t\t`symlinked ${targetFilePath} to ${relativeFromTargetBackToFile}`,\n\t\t\t\t\t);\n\t\t\t\t} catch {\n\t\t\t\t\tthis.context.logger.info(`${targetFilePath} is already present`);\n\t\t\t\t}\n\t\t\t}),\n\t\t);\n\t}\n}\n","import { toAbsolute } from '@alexaegis/fs';\nimport type { PackageJson, WorkspacePackage } from '@alexaegis/workspace-tools';\nimport { existsSync } from 'node:fs';\nimport { cp } from 'node:fs/promises';\nimport { basename, join } from 'node:path';\nimport { PACKAGE_JSON_KIND, type NormalizedPakkContext } from '../../index.js';\nimport type { PackageExportPathContext } from '../export/auto-export.class.js';\nimport type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';\n\n/**\n * Automatically copies the license file to the outDir so it can be part\n * of the distributed package. It uses the license file you defined in the\n * root of your project. Or if you wish to override it, place one into\n * the packages folder.\n */\nexport class AutoCopyLicense implements PakkFeature {\n\tpublic readonly order = 4;\n\n\tprivate readonly context: NormalizedPakkContext;\n\n\tprivate licensePath: string | undefined;\n\n\tconstructor(context: NormalizedPakkContext, _options: unknown) {\n\t\tthis.context = context;\n\t}\n\n\texaminePackage(workspacePackage: WorkspacePackage): Partial<PackageExaminationResult> {\n\t\tconst pathsOfInterest = [\n\t\t\tworkspacePackage.packagePath,\n\t\t\tthis.context.rootWorkspacePackage.packagePath,\n\t\t];\n\n\t\tconst possibleLiceseFileNames = ['license', 'LICENSE'];\n\n\t\tconst possibleLicenseFileLocations = pathsOfInterest.flatMap((path) =>\n\t\t\tpossibleLiceseFileNames.map((fileName) => join(path, fileName)),\n\t\t);\n\n\t\tthis.licensePath = possibleLicenseFileLocations.find((path) => existsSync(path));\n\n\t\tif (this.licensePath) {\n\t\t\tthis.context.logger.trace('found license file at', this.licensePath);\n\t\t} else {\n\t\t\tthis.context.logger.warn(\n\t\t\t\t'no license file found in the following locations',\n\t\t\t\tpossibleLicenseFileLocations,\n\t\t\t);\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tasync process(_packageJson: PackageJson, pathContext: PackageExportPathContext): Promise<void> {\n\t\tif (pathContext.packageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION) {\n\t\t\tif (!this.licensePath) {\n\t\t\t\tthis.context.logger.warn('No license file found!');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst licenseFileDestination = join(\n\t\t\t\ttoAbsolute(this.context.outDir, this.context),\n\t\t\t\tbasename(this.licensePath),\n\t\t\t);\n\n\t\t\ttry {\n\t\t\t\tawait cp(this.licensePath, licenseFileDestination);\n\t\t\t\tthis.context.logger.info('Copied license file from', this.licensePath);\n\t\t\t} catch (error) {\n\t\t\t\tthis.context.logger.error(\n\t\t\t\t\t\"Couldn't copy license file from\",\n\t\t\t\t\tthis.licensePath,\n\t\t\t\t\t'to',\n\t\t\t\t\tthis.context.outDir,\n\t\t\t\t\t'error happened',\n\t\t\t\t\terror,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n}\n","import type { PackageJson, RegularWorkspacePackage } from '@alexaegis/workspace-tools';\n\nimport { deepMapObject } from '@alexaegis/common';\nimport type { NormalizedPakkContext } from '../../index.js';\nimport { type PackageJsonKindType } from '../../package-json/index.js';\nimport type { PakkFeature } from '../pakk-feature.type.js';\n\nexport const pakkDirectivePrefix = 'pakk:';\nexport const pakkDirectiveNotDistributed = `${pakkDirectivePrefix}not-distributed` as const;\nexport const everyPakkDirective = [pakkDirectiveNotDistributed] as const;\n\n/**\n * Processes pakk directives in the packageJson. They are strings that could\n * be present at either on a key or on a value. They can start with a # to let\n * them be interpreted as comments by the shell.\n *\n * - pakk:not-distributed will remove the entry when compiling the distributed\n *   package.json. When placed on a postinstall script, its effect will be\n *   similar to what `pinst` does.\n *\n *   ```json\n *   {\n *     \"scripts\": {\n *       \"postinstall\": \"svelte-kit sync # pakk:not-distributed\",\n *     }\n *   }\n *   ```\n */\nexport class AutoDirective implements PakkFeature {\n\tpublic readonly order = 5;\n\n\tprivate readonly context: NormalizedPakkContext;\n\n\tconstructor(context: NormalizedPakkContext) {\n\t\tthis.context = context;\n\t\tthis.context.logger.info('enabled directives:');\n\t\tthis.context.logger.info(pakkDirectiveNotDistributed);\n\t}\n\n\tpostprocess(\n\t\tworkspacePackage: RegularWorkspacePackage,\n\t\tpackageJsonKind: PackageJsonKindType,\n\t): PackageJson {\n\t\treturn deepMapObject<PackageJson>(workspacePackage.packageJson, (key, value) => {\n\t\t\tif (\n\t\t\t\tpackageJsonKind === 'development' &&\n\t\t\t\ttypeof key === 'string' &&\n\t\t\t\tkey.includes(pakkDirectivePrefix) &&\n\t\t\t\teveryPakkDirective.every((directive) => !key.includes(directive))\n\t\t\t) {\n\t\t\t\tthis.context.logger.warn(\n\t\t\t\t\t'key contains a pakk directive that is not recognized',\n\t\t\t\t\tkey,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tpackageJsonKind === 'development' &&\n\t\t\t\ttypeof value === 'string' &&\n\t\t\t\tvalue.includes(pakkDirectivePrefix) &&\n\t\t\t\teveryPakkDirective.every((directive) => !value.includes(directive))\n\t\t\t) {\n\t\t\t\tthis.context.logger.warn(\n\t\t\t\t\t'value contains a pakk directive that is not recognized',\n\t\t\t\t\tvalue,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn packageJsonKind === 'distribution' &&\n\t\t\t\t((typeof key === 'string' && key.includes(pakkDirectiveNotDistributed)) ||\n\t\t\t\t\t(typeof value === 'string' && value.includes(pakkDirectiveNotDistributed)))\n\t\t\t\t? undefined\n\t\t\t\t: value;\n\t\t});\n\t}\n}\n","import type { Defined } from '@alexaegis/common';\nimport { DEFAULT_STATIC_EXPORT_GLOBS } from '../../internal/defaults.const.js';\n\nexport interface AutoExportStaticOptions {\n\t/**\n\t * ### AutoExportStatic\n\t *\n\t * Relative to cwd, a folder whats content will be simply copied to\n\t * `outDir` and made available using simple, additional export statements.\n\t * Make sure their names don't overlap with other exports!\n\t *\n\t * @defaultValue [\"readme.md\", \"static/\\*\\*\", \"export/**\"]\n\t */\n\tstaticExports?: string[] | undefined;\n}\n\nexport type NormalizedAutoExportStaticOptions = Defined<AutoExportStaticOptions>;\n\nexport const normalizeAutoExportStaticOptions = (\n\toptions?: AutoExportStaticOptions,\n): NormalizedAutoExportStaticOptions => {\n\treturn {\n\t\tstaticExports: options?.staticExports ?? DEFAULT_STATIC_EXPORT_GLOBS,\n\t};\n};\n","import type { PackageJson, WorkspacePackage } from '@alexaegis/workspace-tools';\nimport { globby } from 'globby';\nimport { existsSync } from 'node:fs';\nimport { cp } from 'node:fs/promises';\nimport posix, { basename, join } from 'node:path/posix';\nimport { PACKAGE_JSON_KIND } from '../../index.js';\nimport type { NormalizedPakkContext } from '../../internal/pakk.class.options.js';\nimport type { PackageExportPathContext } from '../export/auto-export.class.js';\nimport { stripFileExtension } from '../export/helpers/strip-file-extension.function.js';\nimport type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';\nimport {\n\tnormalizeAutoExportStaticOptions,\n\ttype AutoExportStaticOptions,\n\ttype NormalizedAutoExportStaticOptions,\n} from './auto-export-static.class.options.js';\n\nexport class AutoExportStatic implements PakkFeature {\n\tpublic readonly order = 2;\n\n\tprivate readonly options: NormalizedAutoExportStaticOptions;\n\tprivate readonly context: NormalizedPakkContext;\n\n\tprivate staticExports: Record<string, string> = {};\n\n\tconstructor(context: NormalizedPakkContext, options?: AutoExportStaticOptions) {\n\t\tthis.options = normalizeAutoExportStaticOptions(options);\n\t\tthis.context = context;\n\t}\n\n\tprivate static collectFileMap = async (\n\t\tcwd: string,\n\t\tglobs: string[],\n\t): Promise<Record<string, string>> => {\n\t\tconst globbyResult = await globby(globs, { cwd, dot: true });\n\t\treturn globbyResult.reduce<Record<string, string>>((accumulator, next) => {\n\t\t\tconst key = `.${posix.sep}${stripFileExtension(basename(next))}`;\n\t\t\taccumulator[key] = `.${posix.sep}${next}`;\n\t\t\treturn accumulator;\n\t\t}, {});\n\t};\n\n\tprivate static copyAll = async (\n\t\tcwd: string,\n\t\trelativeSourceFiles: string[],\n\t\toutDirectory: string,\n\t): Promise<void> => {\n\t\tawait Promise.allSettled(\n\t\t\trelativeSourceFiles\n\t\t\t\t.map((sourceFile) => ({\n\t\t\t\t\tsourceFile: join(cwd, sourceFile),\n\t\t\t\t\ttargetFile: join(cwd, outDirectory, sourceFile),\n\t\t\t\t}))\n\t\t\t\t.filter(\n\t\t\t\t\t({ sourceFile, targetFile }) =>\n\t\t\t\t\t\texistsSync(sourceFile) && !existsSync(targetFile),\n\t\t\t\t)\n\t\t\t\t.map(({ sourceFile, targetFile }) =>\n\t\t\t\t\tcp(sourceFile, targetFile, {\n\t\t\t\t\t\tpreserveTimestamps: true,\n\t\t\t\t\t\trecursive: true,\n\t\t\t\t\t}),\n\t\t\t\t),\n\t\t);\n\t};\n\n\tasync examinePackage(\n\t\t_workspacePackage: WorkspacePackage,\n\t): Promise<Partial<PackageExaminationResult>> {\n\t\tthis.staticExports = await AutoExportStatic.collectFileMap(\n\t\t\tthis.context.workspacePackage.packagePath,\n\t\t\tthis.options.staticExports,\n\t\t);\n\n\t\treturn {};\n\t}\n\n\tasync process(\n\t\t_packageJson: PackageJson,\n\t\tpathContext: PackageExportPathContext,\n\t): Promise<PackageJson> {\n\t\tif (pathContext.packageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION) {\n\t\t\tconst staticFilePaths = Object.values(this.staticExports);\n\n\t\t\tthis.context.logger.info('copy all static files', staticFilePaths);\n\t\t\tawait AutoExportStatic.copyAll(\n\t\t\t\tthis.context.workspacePackage.packagePath,\n\t\t\t\tstaticFilePaths,\n\t\t\t\tthis.context.outDir,\n\t\t\t);\n\t\t}\n\n\t\treturn {\n\t\t\texports: this.staticExports,\n\t\t} as PackageJson;\n\t}\n\n\tpostprocess(workspacePackage: WorkspacePackage): PackageJson {\n\t\tif (workspacePackage.packageJson.exports) {\n\t\t\tfor (const [key, value] of Object.entries(workspacePackage.packageJson.exports)) {\n\t\t\t\t// Remove no longer existing static exports\n\t\t\t\tif (typeof value === 'string' && !this.staticExports[key]) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n\t\t\t\t\tdelete workspacePackage.packageJson.exports[key];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn workspacePackage.packageJson;\n\t}\n}\n","import type { Defined } from '@alexaegis/common';\nimport { PackageJsonExportTarget } from '../../index.js';\nimport {\n\tDEFAULT_PACKAGE_EXPORTS,\n\tDEFAULT_PACKAGE_EXPORT_BASEDIR,\n\tDEFAULT_PACKAGE_EXPORT_IGNORES,\n} from '../../internal/defaults.const.js';\n\nexport interface AutoExportOptions {\n\t/**\n\t * ### AutoExport\n\t *\n\t * The files to treat as entry points to be exported from relative from\n\t * the `srcDir + exportBaseDir` directory.\n\t * It's usually `*` meaning all files directly here are considered the\n\t * entry points of the library.\n\t *\n\t * @defaultValue '*'\n\t */\n\texports?: string | string[] | undefined;\n\n\t/**\n\t * ### AutoExport\n\t *\n\t * What paths to ignore when collecting exports in addition to\n\t * `defaultExportsIgnore` so you're not dropping the defaults when you just\n\t * want to add additional ignore entries.\n\t *\n\t * @defaultValue undefiend\n\t */\n\texportsIgnore?: string[] | undefined;\n\n\t/**\n\t * ### AutoExport\n\t *\n\t * By default test files are excluded.\n\t *\n\t * This option is here if you deliberately want to drop the default ignores.\n\t * Otherwise use `exportsIgnore`.\n\t *\n\t * @defaultValue '*.(spec|test).*'\n\t */\n\tdefaultExportsIgnore?: string[] | undefined;\n\n\t/**\n\t * ### AutoExport\n\t *\n\t * Relative path to `srcDir` if you want your exports to start from a\n\t * different directory.\n\t *\n\t * @example With the default settings src/index.ts will be the \".\" export\n\t * on your package json. If `exportBaseDir` is set to 'api' then\n\t * \"src/api/index.ts\" will be the \".\" export. If on top of this, you\n\t * change exports to be [\"*\", \"sub/*\"]\n\t *\n\t * @defaultValue '.'\n\t */\n\texportBaseDir?: string | undefined;\n\n\t/**\n\t * Where should exports point to in your development packageJson file\n\t *\n\t * By default, to let you develop locally with the same code as you'd\n\t * publish, the development packageJson targets the outDir where your\n\t * built package is supposed to be. This expects you to build the package\n\t * before running it. (Turbo can orchestrate this for you!)\n\t *\n\t * But if you wish your local packages to use the source code directly\n\t * you can set this to 'source' and then exports will point inside your\n\t * 'src' folder. This can be useful for packages that are not transpiled\n\t * and are supposed to be used as is.\n\t *\n\t * Types always point to the source dir so the typescript LSP can provide\n\t * real-time feedback in other packages too without having to rebuild all\n\t * the time!\n\t *\n\t * @defaultValue 'dist'\n\t */\n\tdevelopmentPackageJsonExportsTarget?: 'dist' | 'source' | undefined;\n\n\t/**\n\t * Add svelte export conditions or not\n\t *\n\t * @defaultValue false\n\t */\n\tsvelte?: boolean | undefined;\n}\n\nexport type NormalizedAutoExportOptions = Defined<AutoExportOptions>;\n\nexport const normalizeAutoExportOptions = (\n\toptions?: AutoExportOptions,\n): NormalizedAutoExportOptions => {\n\treturn {\n\t\texports: options?.exports ?? DEFAULT_PACKAGE_EXPORTS,\n\t\texportsIgnore: options?.exportsIgnore ?? [],\n\t\tdefaultExportsIgnore: options?.defaultExportsIgnore ?? DEFAULT_PACKAGE_EXPORT_IGNORES,\n\t\texportBaseDir: options?.exportBaseDir ?? DEFAULT_PACKAGE_EXPORT_BASEDIR,\n\t\tdevelopmentPackageJsonExportsTarget:\n\t\t\toptions?.developmentPackageJsonExportsTarget ?? PackageJsonExportTarget.DIST,\n\t\tsvelte: options?.svelte ?? false,\n\t};\n};\n","import type { PackageJson, PackageJsonExportConditions } from '@alexaegis/workspace-tools';\nimport { basename, posix } from 'node:path';\nimport type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';\nimport { stripFileExtension } from './helpers/strip-file-extension.function.js';\n\nimport { toAbsolute } from '@alexaegis/fs';\nimport { globby } from 'globby';\nimport { dirname } from 'node:path/posix';\nimport type { InternalModuleFormat } from 'rollup';\nimport type { LibraryFormats } from 'vite';\nimport type { NormalizedPakkContext } from '../../internal/pakk.class.options.js';\nimport {\n\tPACKAGE_JSON_KIND,\n\tPackageJsonExportTarget,\n\ttype PackageJsonKindType,\n\ttype PathMap,\n} from '../../package-json/index.js';\nimport {\n\tnormalizeAutoExportOptions,\n\ttype AutoExportOptions,\n\ttype NormalizedAutoExportOptions,\n} from './auto-export.class.options.js';\nimport type { EntryPathVariantMap } from './export-map.type.js';\nimport { createExportMapFromPaths } from './helpers/create-export-map-from-paths.function.js';\n\nexport const allExportPathCombinations = [\n\t`${PACKAGE_JSON_KIND.DEVELOPMENT}-to-${PackageJsonExportTarget.SOURCE}`,\n\t`${PACKAGE_JSON_KIND.DEVELOPMENT}-to-${PackageJsonExportTarget.DIST}`,\n\t`${PACKAGE_JSON_KIND.DISTRIBUTION}-to-${PackageJsonExportTarget.DIST}`,\n] as const;\nexport type AllExportPathCombinations = (typeof allExportPathCombinations)[number];\nexport type ExportPathMap = PathMap<AllExportPathCombinations>;\n\nexport type ExportTargetFileFormats = LibraryFormats;\n\nexport interface PackageExportPathContext {\n\t/**\n\t * When 'packageJsonKind' is set to DEVELOPMENT and this context is used\n\t * to calculate the paths towards the source files, 'formats' and\n\t * 'fileNameFn' are not used.\n\t */\n\tpackageJsonKind: PackageJsonKindType;\n\t/**\n\t * The kind of files an export can point to. It's used to guess/calculate how\n\t * the fileName will change once it ends up in the outDir after building.\n\t * If it's undefined it will not do any renaming and will use the source name.\n\t * Useful when targeting the source or for files that are not being renamed\n\t * during processing like .svelte files.\n\t *\n\t * ? Out of InternalModuleFormat it really is only LibaryFormats that we care about\n\t */\n\tformat: InternalModuleFormat;\n}\n\n/**\n * Generates exports entries automatically\n */\nexport class AutoExport implements PakkFeature {\n\tpublic readonly order = 1;\n\n\tprivate readonly options: NormalizedAutoExportOptions;\n\tprivate readonly context: NormalizedPakkContext;\n\n\tprivate exportMap: EntryPathVariantMap<AllExportPathCombinations> = {};\n\n\tconstructor(context: NormalizedPakkContext, options?: AutoExportOptions) {\n\t\tthis.context = context;\n\t\tthis.options = normalizeAutoExportOptions(options);\n\t}\n\n\tasync examinePackage(_packageJson: PackageJson): Promise<Partial<PackageExaminationResult>> {\n\t\tconst absoluteExportBaseDir = toAbsolute(\n\t\t\tposix.join(this.context.srcDir, this.options.exportBaseDir),\n\t\t\t{\n\t\t\t\tcwd: this.context.workspacePackage.packagePath,\n\t\t\t},\n\t\t);\n\n\t\tconst ignore = [...this.options.exportsIgnore, ...this.options.defaultExportsIgnore];\n\t\tthis.context.logger.trace('ignoring exports', ignore);\n\n\t\tconst entryFiles = await globby(this.options.exports, {\n\t\t\tcwd: absoluteExportBaseDir,\n\t\t\tignore,\n\t\t\tonlyFiles: true,\n\t\t\tdot: true,\n\t\t});\n\t\tthis.context.logger.info('detected package exports', entryFiles);\n\n\t\tthis.exportMap = createExportMapFromPaths(entryFiles, {\n\t\t\toutDir: this.context.outDir,\n\t\t\tsrcDir: this.context.srcDir,\n\t\t\tbasePath: this.options.exportBaseDir,\n\t\t\tkeyKind: 'extensionless-relative-path-from-base',\n\t\t});\n\n\t\tthis.context.logger.trace('exportMap', this.exportMap);\n\n\t\treturn {\n\t\t\tbundlerEntryFiles: entryFiles.reduce<Record<string, string>>((acc, entryFile) => {\n\t\t\t\tconst path = posix.join(this.context.srcDir, this.options.exportBaseDir, entryFile);\n\t\t\t\tconst alias = stripFileExtension(entryFile);\n\t\t\t\tacc[alias] = path;\n\t\t\t\treturn acc;\n\t\t\t}, {}),\n\t\t};\n\t}\n\n\t/**\n\t * This plugin compiles the exports object for a packageJson file\n\t *\n\t * For the distributed packageJson it should always contain paths that are\n\t * targeting the dist folder from the dist folder.\n\t *\n\t * For development packageJson the types always target the source for\n\t * immediate feedback by the LSP by local consumers of the package.\n\t * The actual code that's being imported by node has two options,\n\t * by default they target the outDir and expect libraries to be built\n\t * before actually running them in a local setting.\n\t * There's an alternative mode however that will target the source files.\n\t */\n\tprocess(_packageJson: PackageJson, pathContext: PackageExportPathContext): PackageJson {\n\t\tconst entryExports: Record<string, PackageJsonExportConditions> = {};\n\n\t\tfor (const [key, pathVariants] of Object.entries(this.exportMap)) {\n\t\t\tlet path: string;\n\t\t\tlet typesPath: string = pathVariants['development-to-source'];\n\n\t\t\tconst isSvelteFile = pathVariants['distribution-to-dist'].endsWith('.svelte');\n\t\t\t// Forcing dev package to consume only source files.\n\t\t\tconst developmentPackageJsonExportsTarget = this.options.svelte\n\t\t\t\t? PackageJsonExportTarget.SOURCE\n\t\t\t\t: this.options.developmentPackageJsonExportsTarget;\n\n\t\t\tif (pathContext.packageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION) {\n\t\t\t\tpath = pathVariants['distribution-to-dist'];\n\n\t\t\t\tif (isSvelteFile) {\n\t\t\t\t\ttypesPath = pathVariants['distribution-to-dist'] + '.d.ts'; // foo.svelte => foo.svelte.d.ts\n\t\t\t\t} else if (pathVariants['distribution-to-dist'].endsWith('.ts')) {\n\t\t\t\t\ttypesPath = stripFileExtension(pathVariants['distribution-to-dist']) + '.d.ts'; // foo.ts => foo.d.ts\n\t\t\t\t} else {\n\t\t\t\t\ttypesPath = pathVariants['distribution-to-dist'];\n\t\t\t\t}\n\t\t\t} else if (developmentPackageJsonExportsTarget === PackageJsonExportTarget.SOURCE) {\n\t\t\t\t// svelte files are not recognised by typescript when imported across node_modules,\n\t\t\t\t// so even local packages are pointing to the compiled d.ts files\n\t\t\t\t// this makes it a complete inversion of regular ts files where instead of\n\t\t\t\t// types point to the source for instant feedback and source files to the compiled\n\t\t\t\t// ones to not compile the same source multiple times\n\t\t\t\t// for svelte, you point types to the compiled d.ts because you don't have an option\n\t\t\t\t// and you point the implementation to the source because there's no difference,\n\t\t\t\t// the source will be distributed anyway as svelte files\n\t\t\t\t// But this only applies for direct exports. If you instead export a ts file as\n\t\t\t\t// your package api, and export a svelte module from that, types will work just fine\n\t\t\t\t// so it's better to do that instead.\n\t\t\t\tif (isSvelteFile) {\n\t\t\t\t\ttypesPath = pathVariants['development-to-dist'] + '.d.ts'; // foo.svelte => foo.svelte.d.ts\n\t\t\t\t}\n\t\t\t\tpath = pathVariants['development-to-source'];\n\t\t\t} else {\n\t\t\t\tpath = pathVariants['development-to-dist'];\n\t\t\t}\n\n\t\t\tconst fileName = basename(path);\n\t\t\tconst dir = dirname(path);\n\t\t\tconst extensionlessFileName = stripFileExtension(fileName);\n\n\t\t\tconst exportConditions: PackageJsonExportConditions = {\n\t\t\t\ttypes: typesPath,\n\t\t\t};\n\n\t\t\tif (this.context.formats.includes('cjs')) {\n\t\t\t\texportConditions.require =\n\t\t\t\t\t'./' + posix.join(dir, this.context.fileName('cjs', extensionlessFileName));\n\t\t\t} else {\n\t\t\t\tif (this.context.formats.includes('umd')) {\n\t\t\t\t\texportConditions.require =\n\t\t\t\t\t\t'./' + posix.join(dir, this.context.fileName('umd', extensionlessFileName));\n\t\t\t\t} else if (this.context.formats.includes('iife')) {\n\t\t\t\t\texportConditions.require =\n\t\t\t\t\t\t'./' +\n\t\t\t\t\t\tposix.join(dir, this.context.fileName('iife', extensionlessFileName));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.context.formats.includes('es')) {\n\t\t\t\texportConditions.import =\n\t\t\t\t\t'./' + posix.join(dir, this.context.fileName('es', extensionlessFileName));\n\t\t\t}\n\n\t\t\tif (this.context.formats.includes(this.context.primaryFormat)) {\n\t\t\t\texportConditions.default =\n\t\t\t\t\t'./' +\n\t\t\t\t\tposix.join(\n\t\t\t\t\t\tdir,\n\t\t\t\t\t\tisSvelteFile\n\t\t\t\t\t\t\t? fileName\n\t\t\t\t\t\t\t: this.context.fileName(\n\t\t\t\t\t\t\t\t\tthis.context.primaryFormat,\n\t\t\t\t\t\t\t\t\textensionlessFileName,\n\t\t\t\t\t\t\t  ),\n\t\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (this.options.svelte) {\n\t\t\t\texportConditions['svelte'] =\n\t\t\t\t\t'./' +\n\t\t\t\t\tposix.join(\n\t\t\t\t\t\tdir, // Let svelte import the source file regardless\n\t\t\t\t\t\tisSvelteFile\n\t\t\t\t\t\t\t? fileName\n\t\t\t\t\t\t\t: this.context.fileName('es', extensionlessFileName),\n\t\t\t\t\t);\n\n\t\t\t\tif (isSvelteFile) {\n\t\t\t\t\tdelete exportConditions.import;\n\t\t\t\t\tdelete exportConditions.require;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst indexNormalizedKey = key.replace(/\\/index$/, '/').replace(/^.\\/$/, '.');\n\n\t\t\tentryExports[indexNormalizedKey] = exportConditions;\n\t\t}\n\n\t\t// This arrangement will first clean the exports entry then re-populate it\n\t\treturn [{ exports: undefined }, { exports: entryExports }];\n\t}\n}\n","import type { PackageJson } from '@alexaegis/workspace-tools';\nimport type { ModuleFormat } from 'rollup';\nimport type { ViteFileNameFn } from '../../../internal/pakk.class.options.js';\n\nexport type JsExtensionStubs = 'js' | 'cjs' | 'mjs' | `${string}.js`;\nexport type JsExtensions = `.${JsExtensionStubs}`;\n\n/**\n * This function is used to replicate the default vite behavior when naming\n * bundles. Pakk doesn't try to figure out filenames by reading the filesystem\n * instead it just tries to reuse the defined fileName fn on vite's config.\n * If not available, this will be the fallback.\n *\n * This function only replicates the file naming behavior when vite's entry\n * files are defined as named entries via an object. The naming is different\n * when entries are defined using an array. That is not implemented as pakk\n * will always force a named entry object.\n *\n * Vite's fileName fn is called without the extension, For example when\n * bundling a file called `index.ts` the fileName fn will get only `index`,\n * when called with `foo.config.js` it will recieve `foo.config`.\n *\n * @returns a function that behaves like how vite does by default\n */\nexport const createDefaultViteFileNameFn: (packageType: PackageJson['type']) => ViteFileNameFn =\n\t(packageType) => (format, extensionlessFileName) =>\n\t\textensionlessFileName + getDefaultViteBundleFileExtension(format, packageType);\n\n/**\n * Default vite behavior: if no fileName fn is defined, then a commonjs package\n * when built as cjs, will have files with .js extensions, and when built as esm\n * they will have .mjs extension.\n *\n * If it's an esm package, it's the inverse, esm builds will have `.js`\n * extensions and cjs builds will have `.cjs` extension.\n *\n * This aligns with node's behavior where `.js` files are treated based on what\n * their respective packageJson files declare and files with `.mjs` or `.cjs`\n * are always read as esm or cjs modules respectively.\n */\nexport const getDefaultViteBundleFileExtension = (\n\tformat: ModuleFormat,\n\tpackageType: PackageJson['type'] = 'commonjs',\n): JsExtensions => {\n\tswitch (format) {\n\t\tcase 'es':\n\t\tcase 'esm': {\n\t\t\treturn packageType === 'module' ? '.js' : '.mjs';\n\t\t}\n\t\tcase 'cjs': {\n\t\t\treturn packageType === 'commonjs' ? '.js' : '.cjs';\n\t\t}\n\t\tdefault: {\n\t\t\tthrow new Error(\n\t\t\t\t`Cannot determine default fileName for format: ${format} only esm and cjs can be auto determined.`,\n\t\t\t);\n\t\t}\n\t}\n};\n","import { normalizeLoggerOption, type LoggerOption } from '@alexaegis/logging';\n\nexport interface AutoMetadataOptions extends LoggerOption {\n\t/**\n\t * ### AutoMetadata\n\t *\n\t * A list of packageJson keys from the workspace root package.json to\n\t * autofill in built artifacts\n\t *\n\t * Keys already present in the package's packageJson file will take\n\t * precendence if they are objects or arrays, otherwise overwritten\n\t *\n\t * @defaultValue DEFAULT_AUTO_METADATA_KEYS_FROM_WORKSPACE - [\"license\", \"author\", \"homepage\", \"bugs\", \"keywords\", \"config\", \"engines\"]\n\t */\n\tkeysFromWorkspace?: string[];\n\n\t/**\n\t * ### AutoMetadata\n\t *\n\t * Keys that you must define yourself. This plugin can't figure them out\n\t * for you, but it can add their keys as empty values into the source\n\t * packageJson. When one is missing or empty, the build is aborted!\n\t *\n\t * @defaultValue DEFAULT_AUTO_METADATA_MANDATORY_KEYS - [\"name\", \"description\", \"version\"]\n\t */\n\tmandatoryKeys?: string[];\n\n\t/**\n\t * ### AutoMetadata\n\t *\n\t * A set of key value pairs that will only be used as packageJson values\n\t * when not found in the workspace packageJson\n\t *\n\t * @defaultValue {}\n\t */\n\tfallbackEntries?: Record<string, string>;\n\n\t/**\n\t * ### AutoMetadata\n\t *\n\t * A set of key value pairs that will always be used and overwrite\n\t * everything else\n\t *\n\t * @defaultValue {}\n\t */\n\toverrideEntries?: Record<string, string>;\n}\n\nexport const DEFAULT_AUTO_METADATA_KEYS_FROM_WORKSPACE = [\n\t'license',\n\t'author',\n\t'homepage',\n\t'bugs',\n\t'keywords',\n\t'config',\n\t'engines',\n\t'repository',\n];\n\nexport const DEFAULT_AUTO_METADATA_MANDATORY_KEYS = ['name', 'description', 'version'];\n\nexport type NormalizedAutoMetadataOptions = Required<AutoMetadataOptions>;\n\nexport const normalizeAutoMetadataOptions = (\n\toptions?: AutoMetadataOptions,\n): NormalizedAutoMetadataOptions => {\n\treturn {\n\t\t...normalizeLoggerOption(options),\n\t\tkeysFromWorkspace: options?.keysFromWorkspace ?? DEFAULT_AUTO_METADATA_KEYS_FROM_WORKSPACE,\n\t\tmandatoryKeys: options?.mandatoryKeys ?? DEFAULT_AUTO_METADATA_MANDATORY_KEYS,\n\t\tfallbackEntries: options?.fallbackEntries ?? {},\n\t\toverrideEntries: options?.overrideEntries ?? {},\n\t};\n};\n","import { deepMerge, type Awaitable } from '@alexaegis/common';\nimport { type PackageJson, type WorkspacePackage } from '@alexaegis/workspace-tools';\nimport type { NormalizedPakkContext } from '../../internal/pakk.class.options.js';\nimport { PACKAGE_JSON_KIND, type PackageJsonKindType } from '../../package-json/index.js';\nimport type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';\nimport {\n\tnormalizeAutoMetadataOptions,\n\ttype AutoMetadataOptions,\n\ttype NormalizedAutoMetadataOptions,\n} from './auto-metadata.class.options.js';\n\n/**\n * Fills out packageJson fields of the distributed packageJson based on\n * either manually defined key-value pairs or a set of keys that then will\n * be read from the workspace packageJson file. Or both, in which case if a key\n * is defined in both the manual takes precedence.\n */\nexport class AutoMetadata implements PakkFeature {\n\tpublic readonly order = 6;\n\n\tprivate readonly options: NormalizedAutoMetadataOptions;\n\tprivate readonly context: NormalizedPakkContext;\n\tprivate metadataFromWorkspacePackageJson: PackageJson | undefined;\n\n\tconstructor(context: NormalizedPakkContext, rawOptions?: AutoMetadataOptions) {\n\t\tthis.context = context;\n\t\tthis.options = normalizeAutoMetadataOptions(rawOptions);\n\t}\n\n\texaminePackage(\n\t\tworkspacePackage: WorkspacePackage,\n\t): Awaitable<Partial<PackageExaminationResult>> {\n\t\tthis.context.logger.trace(\n\t\t\t'collecting keys from workspace:',\n\t\t\tthis.options.keysFromWorkspace,\n\t\t);\n\n\t\tthis.metadataFromWorkspacePackageJson = Object.fromEntries(\n\t\t\tObject.entries(this.context.rootWorkspacePackage.packageJson).filter(\n\t\t\t\t([key]) =>\n\t\t\t\t\tthis.options.keysFromWorkspace.includes(key) &&\n\t\t\t\t\t!Object.hasOwn(workspacePackage.packageJson, key),\n\t\t\t),\n\t\t);\n\n\t\treturn {};\n\t}\n\n\tpostprocess(\n\t\tworkspacePackage: WorkspacePackage,\n\t\tpackageJsonKind: PackageJsonKindType,\n\t): PackageJson {\n\t\tif (packageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION) {\n\t\t\tthis.context.logger.info('filling metadata for distributed packageJson');\n\t\t\tthis.context.logger.trace('fallbackEntries', this.options.fallbackEntries);\n\t\t\tthis.context.logger.trace(\n\t\t\t\t'metadataFromWorkspacePackageJson',\n\t\t\t\tthis.metadataFromWorkspacePackageJson,\n\t\t\t);\n\t\t\tthis.context.logger.trace('overrideEntries', this.options.overrideEntries);\n\n\t\t\tconst filledPackageJson: PackageJson = deepMerge([\n\t\t\t\tthis.options.fallbackEntries,\n\t\t\t\tworkspacePackage.packageJson,\n\t\t\t\tthis.metadataFromWorkspacePackageJson,\n\t\t\t\tthis.options.overrideEntries,\n\t\t\t]);\n\n\t\t\tif (typeof filledPackageJson.repository === 'object') {\n\t\t\t\tfilledPackageJson.repository.directory =\n\t\t\t\t\tworkspacePackage.packagePathFromRootPackage;\n\t\t\t}\n\n\t\t\tconst missingKeys = this.options.mandatoryKeys.filter(\n\t\t\t\t(mandatoryKey) => !Object.hasOwn(filledPackageJson, mandatoryKey),\n\t\t\t);\n\n\t\t\tif (missingKeys.length > 0) {\n\t\t\t\tconst errorMessage =\n\t\t\t\t\t'Some keys are missing! Please define the following keys ' +\n\t\t\t\t\t`in your packageJson file: ${missingKeys.join(', ')}`;\n\n\t\t\t\tthis.context.logger.error(errorMessage);\n\t\t\t\tthrow new Error(errorMessage);\n\t\t\t}\n\n\t\t\treturn filledPackageJson;\n\t\t} else {\n\t\t\treturn workspacePackage.packageJson;\n\t\t}\n\t}\n}\n","import type { PackageJson, RegularWorkspacePackage } from '@alexaegis/workspace-tools';\n\nimport type { NormalizedPakkContext } from '../../index.js';\nimport { PACKAGE_JSON_KIND, type PackageJsonKindType } from '../../package-json/index.js';\nimport type { PakkFeature } from '../pakk-feature.type.js';\n\n/**\n * Removes duplicated dependency and peerDependency entries leaving only the\n * peerDependencies behind.\n *\n * The point of this is to let peerDependencies install locally too by defining\n * them twice, once as a peerDependency, and once as a normal dependency. This\n * step will remove the one that was meant to only be present locally.\n */\nexport class AutoPeer implements PakkFeature {\n\tpublic readonly order = 5;\n\n\tprivate readonly context: NormalizedPakkContext;\n\n\tconstructor(context: NormalizedPakkContext) {\n\t\tthis.context = context;\n\t}\n\n\tpostprocess(\n\t\tworkspacePackage: RegularWorkspacePackage,\n\t\tpackageJsonKind: PackageJsonKindType,\n\t): PackageJson {\n\t\tif (\n\t\t\tpackageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION &&\n\t\t\tworkspacePackage.packageJson.dependencies &&\n\t\t\tworkspacePackage.packageJson.peerDependencies\n\t\t) {\n\t\t\tthis.context.logger.info('removing dependencies that are also peerDependencies...');\n\t\t\tconst peerDependencies = Object.keys(workspacePackage.packageJson.peerDependencies);\n\n\t\t\tconst deduplicatedDependencies = Object.fromEntries(\n\t\t\t\tObject.entries(workspacePackage.packageJson.dependencies).filter(\n\t\t\t\t\t([dependency]) => !peerDependencies.includes(dependency),\n\t\t\t\t),\n\t\t\t);\n\t\t\treturn {\n\t\t\t\t...workspacePackage.packageJson,\n\t\t\t\tdependencies:\n\t\t\t\t\tObject.values(deduplicatedDependencies).length > 0\n\t\t\t\t\t\t? deduplicatedDependencies\n\t\t\t\t\t\t: undefined,\n\t\t\t} as PackageJson;\n\t\t} else {\n\t\t\treturn workspacePackage.packageJson;\n\t\t}\n\t}\n}\n","import type { Defined, ObjectKeyOrder } from '@alexaegis/common';\nimport { normalizeCwdOption, type CwdOption } from '@alexaegis/fs';\n\nexport interface AutoSortPackageJsonOptions extends CwdOption {\n\t/**\n\t * ### AutoSortPackageJson\n\t *\n\t * Define an order of keys that will be applied to the target object\n\t * The rest of the keys will be ordered in alphabetical order.\n\t * You can nest ordering by adding an object, that defines a sub-ordering.\n\t *\n\t * ! All ordering keys are treated as regular expressions, make sure they\n\t * ! are valid!\n\t *\n\t * To keep your package.json valid some order rules may be overwritten,\n\t * like making sure 'types' is always the first entry in 'exports' objects\n\t *\n\t * By default it orders everything in alphabetical order.\n\t *\n\t * @example ['name', '.*', { key: 'scripts', order: ['start', 'build.*'] }, '.*']\n\t * @defaultValue []\n\t */\n\tsortingPreference?: ObjectKeyOrder | undefined;\n}\n\nexport type NormalizedAutoSortPackageJsonOptions = Defined<CwdOption> & AutoSortPackageJsonOptions;\n\nexport const normalizeAutoSortPackageJsonOptions = (\n\toptions?: AutoSortPackageJsonOptions,\n): NormalizedAutoSortPackageJsonOptions => {\n\treturn {\n\t\t...normalizeCwdOption(options),\n\t\tsortingPreference: options?.sortingPreference,\n\t};\n};\n","import { sortObject } from '@alexaegis/common';\nimport type { PackageJson, RegularWorkspacePackage } from '@alexaegis/workspace-tools';\nimport { createJsonSortingPreferenceNormalizer } from '@alexaegis/workspace-tools/sort';\nimport type { NormalizedPakkContext } from '../../internal/pakk.class.options.js';\nimport type { PackageExaminationResult, PakkFeature } from '../pakk-feature.type.js';\nimport {\n\tnormalizeAutoSortPackageJsonOptions,\n\ttype AutoSortPackageJsonOptions,\n\ttype NormalizedAutoSortPackageJsonOptions,\n} from './auto-sort-package-json.class.options.js';\n\nexport class AutoSort implements PakkFeature {\n\tpublic readonly order = 7;\n\n\tprivate readonly context: NormalizedPakkContext;\n\tprivate readonly options: NormalizedAutoSortPackageJsonOptions;\n\tprivate sortingNormalizer!: Awaited<ReturnType<typeof createJsonSortingPreferenceNormalizer>>;\n\n\tconstructor(context: NormalizedPakkContext, options?: AutoSortPackageJsonOptions) {\n\t\tthis.context = context;\n\t\tthis.options = normalizeAutoSortPackageJsonOptions(options);\n\t}\n\n\tasync examinePackage(): Promise<Partial<PackageExaminationResult>> {\n\t\tthis.sortingNormalizer = await createJsonSortingPreferenceNormalizer(\n\t\t\t'package.json',\n\t\t\tthis.options,\n\t\t);\n\n\t\treturn {};\n\t}\n\n\tpostprocess(workspacePackage: RegularWorkspacePackage): PackageJson {\n\t\tthis.context.logger.info('sorting packageJson...');\n\t\treturn sortObject(\n\t\t\tworkspacePackage.packageJson,\n\t\t\tthis.sortingNormalizer(this.options.sortingPreference),\n\t\t);\n\t}\n}\n","import { normalizeCwdOption, type CwdOption } from '@alexaegis/fs';\nimport {\n\tcollectWorkspacePackages,\n\ttype RegularWorkspacePackage,\n\ttype RootWorkspacePackage,\n} from '@alexaegis/workspace-tools';\nimport { sep } from 'node:path';\n\nexport interface CurrentWorkspacePackageWithRoot {\n\tworkspacePackage: RegularWorkspacePackage;\n\trootWorkspacePackage: RootWorkspacePackage;\n}\n\nexport const findCurrentAndRootWorkspacePackage = async (\n\trawOptions?: CwdOption,\n): Promise<CurrentWorkspacePackageWithRoot> => {\n\tconst options = normalizeCwdOption(rawOptions);\n\tconst packageDirName = options.cwd.slice(Math.max(0, options.cwd.lastIndexOf(sep)));\n\tconst workspace = await collectWorkspacePackages(options);\n\n\tconst rootWorkspacePackage = workspace.find(\n\t\t(workspacePackage): workspacePackage is RootWorkspacePackage =>\n\t\t\tworkspacePackage.packageKind === 'root',\n\t);\n\n\tconst workspacePackage = workspace.find(\n\t\t(workspacePackage): workspacePackage is RegularWorkspacePackage =>\n\t\t\tworkspacePackage.packageKind === 'regular' &&\n\t\t\tworkspacePackage.packagePath.includes(options.cwd) &&\n\t\t\t(workspacePackage.packagePath + sep).includes(packageDirName + sep),\n\t);\n\n\tif (!rootWorkspacePackage || !workspacePackage) {\n\t\tthrow new Error('Package could not be determined');\n\t}\n\n\treturn { workspacePackage, rootWorkspacePackage };\n};\n","import type { Defined, Replace } from '@alexaegis/common';\nimport {\n\tnormalizeCwdOption,\n\tnormalizeWriteJsonOptions,\n\ttype CwdOption,\n\ttype WriteJsonOptions,\n} from '@alexaegis/fs';\nimport {\n\tcreateLogger,\n\tnormalizeLogLevelOption,\n\ttype LogLevelOption,\n\ttype LoggerOption,\n} from '@alexaegis/logging';\nimport type { PackageJson } from '@alexaegis/workspace-tools';\nimport type { LibraryFormats, LibraryOptions } from 'vite';\nimport {\n\tnormalizeAutoBinOptions,\n\ttype AutoBinOptions,\n} from '../plugins/bin/auto-bin.class.options.js';\n\nimport {\n\tnormalizeAutoExportOptions,\n\tnormalizeAutoExportStaticOptions,\n\tnormalizeAutoSortPackageJsonOptions,\n\ttype AutoExportOptions,\n\ttype AutoExportStaticOptions,\n\ttype NormalizedAutoSortPackageJsonOptions,\n\ttype PackageJsonKindType,\n\ttype PakkFeatureName,\n} from '../index.js';\nimport {\n\tnormalizeAutoMetadataOptions,\n\ttype AutoMetadataOptions,\n} from '../plugins/metadata/auto-metadata.class.options.js';\nimport { DEFAULT_OUT_DIR, DEFAULT_SRC_DIR } from './defaults.const.js';\nimport type { CurrentWorkspacePackageWithRoot } from './find-current-and-root-workspace-package.function.js';\n\n/**\n * A function that can be defined on Vite where it expects you to decide the\n * name of a file based on the output format.\n *\n * the fileName parameter here is an extensionless filename.\n *\n * For example if an entry point is at 'src/api/hello.ts' the name it will\n * pass is just 'hello'\n */\nexport type ViteFileNameFn = Exclude<LibraryOptions['fileName'], string | undefined>;\n\nexport interface PakkContext extends CurrentWorkspacePackageWithRoot, CwdOption, LoggerOption {\n\tformats: LibraryFormats[];\n\tfileName?: ViteFileNameFn | undefined;\n\t/**\n\t * Will depend on the \"type\" field in the packageJson file.\n\t * 'es' if 'module', 'cjs' otherwise.\n\t */\n\tprimaryFormat: LibraryFormats;\n\n\tpackageType: NonNullable<PackageJson['type']>;\n\n\t/**\n\t * source root, relative to cwd\n\t * @defaultValue 'src'\n\t */\n\tsrcDir?: string | undefined;\n\n\t/**\n\t * the expected output directory relative to the package's directory.\n\t *\n\t * @defaultValue 'dist'\n\t */\n\toutDir?: string | undefined;\n}\n\nexport type NormalizedPakkContext = Defined<PakkContext>;\n\nexport interface PakkOptions\n\textends WriteJsonOptions,\n\t\tCwdOption,\n\t\tLoggerOption,\n\t\tLogLevelOption,\n\t\tAutoBinOptions,\n\t\tAutoExportOptions,\n\t\tAutoExportStaticOptions,\n\t\tAutoMetadataOptions {\n\t/**\n\t * Source root, relative to the package directory\n\t *\n\t * @defaultValue 'src'\n\t */\n\tsrcDir?: string | undefined;\n\n\t/**\n\t * The expected output directory relative to the package's directory.\n\t *\n\t * @defaultValue 'dist'\n\t */\n\toutDir?: string | undefined;\n\n\t/**\n\t * packageJson to modify and put in the artifact, relative to the package's\n\t * directory.\n\t *\n\t * @defaultValue 'package.json'\n\t */\n\tsourcePackageJson?: string | undefined;\n\n\t/**\n\t * Which packageJson to act on. Will do both when left empty.\n\t * - 'development': the one in your packages folder that you yourself edit too\n\t * - 'distribution': the one that is coped to the 'dist' folder\n\t *\n\t * By default is undefined, meaning both.\n\t *\n\t * @defaultValue undefined\n\t */\n\ttargetPackageJsonKind?: PackageJsonKindType | undefined;\n\n\t/**\n\t * If left empty, all features will remain enabled. Except the disabled ones\n\t */\n\tenabledFeatures?: PakkFeatureName[] | undefined;\n\n\t/**\n\t * If left empty, all features will remain enabled. Takes precedence over\n\t * 'enabledFeatures'\n\t */\n\tdisabledFeatures?: PakkFeatureName[] | undefined;\n\n\t/**\n\t * Generate dts definitions using https://github.com/qmhc/vite-plugin-dts\n\t */\n\tdts?: boolean | undefined;\n}\n\nexport type NormalizedPakkOptions = Defined<\n\tReplace<Omit<PakkOptions, 'targetPackageJsonKind'>, { filterFeatures: RegExp[] }>\n> &\n\tPick<PakkOptions, 'targetPackageJsonKind'> &\n\tNormalizedAutoSortPackageJsonOptions;\n\nexport const normalizePakkOptions = (options?: PakkOptions): NormalizedPakkOptions => {\n\tconst logLevelOptions = normalizeLogLevelOption(options);\n\treturn {\n\t\t...normalizeCwdOption(options),\n\t\t...logLevelOptions,\n\t\t...normalizeWriteJsonOptions(options),\n\t\t...normalizeAutoBinOptions(options),\n\t\t...normalizeAutoExportOptions(options),\n\t\t...normalizeAutoExportStaticOptions(options),\n\t\t...normalizeAutoMetadataOptions(options),\n\t\t...normalizeAutoSortPackageJsonOptions(options),\n\t\tlogger:\n\t\t\toptions?.logger ?? createLogger({ name: 'pakk', minLevel: logLevelOptions.logLevel }),\n\t\tsourcePackageJson: options?.sourcePackageJson ?? 'package.json',\n\t\tsrcDir: options?.srcDir ?? DEFAULT_SRC_DIR,\n\t\toutDir: options?.outDir ?? DEFAULT_OUT_DIR,\n\t\tenabledFeatures: options?.enabledFeatures ?? [],\n\t\tdisabledFeatures: options?.disabledFeatures ?? [],\n\t\tautoPrettier: options?.autoPrettier ?? true,\n\t\tdts: options?.dts ?? true,\n\t\ttargetPackageJsonKind: options?.targetPackageJsonKind,\n\t};\n};\n","import { asyncFilterMap, deepMerge } from '@alexaegis/common';\nimport { toAbsolute } from '@alexaegis/fs';\nimport type { Logger } from '@alexaegis/logging';\nimport type { PackageJson, WorkspacePackage } from '@alexaegis/workspace-tools';\nimport { join } from 'node:path';\nimport type { LibraryFormats } from 'vite';\nimport {\n\tPACKAGE_JSON_KIND,\n\ttype PackageJsonKindType,\n} from '../package-json/package-json-kind.enum.js';\nimport { AutoBin } from '../plugins/bin/auto-bin.class.js';\nimport { AutoCopyLicense } from '../plugins/copy-license/auto-copy-license.class.js';\nimport { AutoDirective } from '../plugins/directive/auto-directive.class.js';\nimport { AutoExportStatic } from '../plugins/export-static/auto-export-static.class.js';\nimport { AutoExport } from '../plugins/export/auto-export.class.js';\nimport { createDefaultViteFileNameFn } from '../plugins/export/helpers/bundle-file-name.function.js';\nimport { AutoMetadata } from '../plugins/metadata/auto-metadata.class.js';\nimport type { PackageExaminationResult, PakkFeature } from '../plugins/pakk-feature.type.js';\nimport { AutoPeer } from '../plugins/peer/auto-peer.class.js';\nimport { AutoSort } from '../plugins/sort-package-json/auto-sort-package-json.class.js';\nimport { findCurrentAndRootWorkspacePackage } from './find-current-and-root-workspace-package.function.js';\nimport {\n\tnormalizePakkOptions,\n\ttype NormalizedPakkContext,\n\ttype NormalizedPakkOptions,\n\ttype PakkContext,\n\ttype PakkOptions,\n} from './pakk.class.options.js';\n\nexport const createIsFeatureEnabled =\n\t(enabledFeatures: PakkFeatureName[], disabledFeatures: PakkFeatureName[]) =>\n\t(feature: PakkFeatureName): boolean => {\n\t\tconst isEnabled = enabledFeatures.length === 0 || enabledFeatures.includes(feature);\n\t\tconst isDisabled = disabledFeatures.includes(feature);\n\t\treturn isEnabled && !isDisabled;\n\t};\n\nexport const pakkFeatureMap = {\n\tbin: AutoBin,\n\t'copy-license': AutoCopyLicense,\n\texport: AutoExport,\n\t'export-static': AutoExportStatic,\n\tmetadata: AutoMetadata,\n\tpeer: AutoPeer,\n\tsort: AutoSort,\n\tdirective: AutoDirective,\n} as const;\n\nexport const pakkFeatures = Object.keys(pakkFeatureMap) as PakkFeatureName[];\n\nexport type PakkFeatureName = keyof typeof pakkFeatureMap;\n\n/**\n * This class does not execute anything on it's own, just provides itself as a\n * tool that then needs to be orchestrated by antoher tool. This could be\n * the standalone runner or the vite plugin. It also does not hold state,\n * the packageJson object that is being worked on has to be stored elsewhere\n * to avoid inner mutation.\n */\nexport class Pakk {\n\tpublic readonly options: NormalizedPakkOptions;\n\tpublic readonly context: NormalizedPakkContext;\n\n\tprivate features: PakkFeature[] = [];\n\n\tprivate constructor(context: NormalizedPakkContext, options: NormalizedPakkOptions) {\n\t\tthis.context = context;\n\t\tthis.options = options;\n\n\t\tif (this.options.svelte) {\n\t\t\tthis.options.logger.info(\"svelte mode: forcing 'es' only output format\");\n\t\t\tthis.context.formats = ['es']; // only es format is suppored for svelte\n\t\t}\n\n\t\tconst isFeatureEnabled = createIsFeatureEnabled(\n\t\t\tthis.options.enabledFeatures,\n\t\t\tthis.options.disabledFeatures,\n\t\t);\n\n\t\tthis.features = Object.entries(pakkFeatureMap)\n\t\t\t.filter(([featureName]) => isFeatureEnabled(featureName as PakkFeatureName))\n\t\t\t.map(([featureName, feature]) => {\n\t\t\t\treturn new feature(\n\t\t\t\t\t{\n\t\t\t\t\t\t...this.context,\n\t\t\t\t\t\tlogger: options.logger.getSubLogger({\n\t\t\t\t\t\t\tname: featureName,\n\t\t\t\t\t\t}),\n\t\t\t\t\t},\n\t\t\t\t\toptions,\n\t\t\t\t);\n\t\t\t})\n\t\t\t.sort((a, b) => a.order - b.order);\n\n\t\tthis.options.logger.trace('features enabled:', this.features.length);\n\t\tthis.options.logger.trace('context', {\n\t\t\t...this.context,\n\t\t\tlogger: 'SKIPPED FROM LOG',\n\t\t\trootWorkspacePackage: {\n\t\t\t\t...this.context.rootWorkspacePackage,\n\t\t\t\tpackageJson: 'SKIPPED FROM LOG',\n\t\t\t},\n\t\t\tworkspacePackage: {\n\t\t\t\t...this.context.workspacePackage,\n\t\t\t\tpackageJson: 'SKIPPED FROM LOG',\n\t\t\t},\n\t\t});\n\t}\n\n\tgetLogger(): Logger<unknown> {\n\t\treturn this.options.logger;\n\t}\n\n\tgetTargetPackageJsonKinds(): PackageJsonKindType[] {\n\t\treturn this.options.targetPackageJsonKind\n\t\t\t? [this.options.targetPackageJsonKind]\n\t\t\t: Object.values(PACKAGE_JSON_KIND);\n\t}\n\n\tstatic async withContext(\n\t\tmanualContext: Pick<PakkContext, 'formats' | 'fileName'>,\n\t\trawOptions?: PakkOptions | undefined,\n\t): Promise<Pakk> {\n\t\tconst options = normalizePakkOptions(rawOptions);\n\t\tconst workspaceContext = await findCurrentAndRootWorkspacePackage(options);\n\t\tconst primaryFormat = Pakk.primaryLibraryFormat(\n\t\t\tworkspaceContext.workspacePackage.packageJson,\n\t\t);\n\t\tconst packageType =\n\t\t\tworkspaceContext.workspacePackage.packageJson.type === 'module' ? 'module' : 'commonjs';\n\n\t\tconst pakk = new Pakk(\n\t\t\t{\n\t\t\t\t...workspaceContext,\n\t\t\t\t...manualContext,\n\t\t\t\tprimaryFormat,\n\t\t\t\tpackageType,\n\t\t\t\tfileName: manualContext.fileName ?? createDefaultViteFileNameFn(packageType),\n\t\t\t\toutDir: options.outDir,\n\t\t\t\tsrcDir: options.srcDir,\n\t\t\t\tcwd: options.cwd,\n\t\t\t\tlogger: options.logger,\n\t\t\t},\n\t\t\toptions,\n\t\t);\n\t\treturn pakk;\n\t}\n\n\tstatic primaryLibraryFormat(packageJson: PackageJson): LibraryFormats {\n\t\treturn packageJson.type === 'module' ? 'es' : 'cjs';\n\t}\n\n\t/**\n\t * 1st step, examining the package. This step does not write anything.\n\t * It can be done before the build takes place as it's only supposed to\n\t * take a look at your source code.\n\t */\n\tasync examinePackage(\n\t\tworkspacePackage: WorkspacePackage = this.context.workspacePackage,\n\t): Promise<PackageExaminationResult> {\n\t\tconst detectedExports = await asyncFilterMap(\n\t\t\tthis.features,\n\t\t\tasync (plugin) => await plugin.examinePackage?.(workspacePackage),\n\t\t);\n\n\t\treturn deepMerge([\n\t\t\t{\n\t\t\t\tbundlerEntryFiles: {},\n\t\t\t\tpackageJsonUpdates: {},\n\t\t\t} as PackageExaminationResult,\n\t\t\t...detectedExports,\n\t\t]);\n\t}\n\n\t/**\n\t * Will return a path adjusted packageJson object based on the content of\n\t * the workspace for both the SOURCE and DISTRIBUTION packageJson files.\n\t *\n\t * And also returns the path where it should be written to.\n\t */\n\tasync createUpdatedPackageJson(\n\t\tpackageJsonKind: PackageJsonKindType,\n\t): Promise<{ updatedPackageJson: PackageJson; path: string }> {\n\t\tconst packageJsonUpdates = await asyncFilterMap(\n\t\t\tthis.features,\n\t\t\tasync (plugin) =>\n\t\t\t\tawait plugin.process?.(structuredClone(this.context.workspacePackage.packageJson), {\n\t\t\t\t\tpackageJsonKind,\n\t\t\t\t\tformat: this.context.primaryFormat,\n\t\t\t\t}),\n\t\t);\n\n\t\tlet updatedPackageJson: PackageJson = deepMerge([\n\t\t\tthis.context.workspacePackage.packageJson,\n\t\t\t...packageJsonUpdates.flat(1),\n\t\t]);\n\n\t\tupdatedPackageJson = this.features.reduce<PackageJson>(\n\t\t\t(packageJson, plugin) =>\n\t\t\t\tplugin.postprocess?.(\n\t\t\t\t\t{ ...this.context.workspacePackage, packageJson },\n\t\t\t\t\tpackageJsonKind,\n\t\t\t\t) ?? packageJson,\n\t\t\tupdatedPackageJson,\n\t\t);\n\n\t\tconst path =\n\t\t\tpackageJsonKind === PACKAGE_JSON_KIND.DISTRIBUTION\n\t\t\t\t? toAbsolute(\n\t\t\t\t\t\tjoin(\n\t\t\t\t\t\t\tthis.context.workspacePackage.packagePath,\n\t\t\t\t\t\t\tthis.options.outDir,\n\t\t\t\t\t\t\t'package.json',\n\t\t\t\t\t\t),\n\t\t\t\t\t\tthis.options,\n\t\t\t\t  )\n\t\t\t\t: toAbsolute(\n\t\t\t\t\t\tjoin(this.context.workspacePackage.packagePath, 'package.json'),\n\t\t\t\t\t\tthis.options,\n\t\t\t\t  );\n\n\t\treturn { updatedPackageJson, path };\n\t}\n}\n"],"names":["PackageJsonExportTarget","extname","basename","posix","join","dirname","toAbsolute","globby","existsSync","turnIntoExecutable","getPackageJsonTemplateVariables","rm","relative","getPrettierFormatter","readFile","mkdir","writeFile","rename","symlink","cp","deepMapObject","normalizeLoggerOption","deepMerge","normalizeCwdOption","createJsonSortingPreferenceNormalizer","sortObject","sep","collectWorkspacePackages","workspacePackage","normalizeLogLevelOption","normalizeWriteJsonOptions","createLogger","asyncFilterMap"],"mappings":"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"}