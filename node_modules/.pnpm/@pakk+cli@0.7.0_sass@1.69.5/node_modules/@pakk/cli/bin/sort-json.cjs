"use strict";
const cliTools = require("@alexaegis/cli-tools");
const logging = require("@alexaegis/logging");
const sort = require("@alexaegis/workspace-tools/sort");
const node_path = require("node:path");
require("yargs");
const _package = require("../package-dde5740b.cjs");
const sortJsonFile_function = require("../sort-json-file.function-4ea2f42a.cjs");
require("@alexaegis/common");
require("@alexaegis/fs");
require("@alexaegis/workspace-tools");
const yargsForSortJson = (yargs) => {
  return yargs.option("check", {
    boolean: true,
    description: "Checks if every packageJson in a workspace conforms to the ordering, fails if not",
    default: false
  });
};
const yarguments = cliTools.YargsBuilder.withDefaults(_package.packageJson).add(yargsForSortJson).add(cliTools.yargsForDryOption).build();
void (async () => {
  const options = await yarguments.parseAsync();
  const logger = logging.createLogger({ name: "sort-json" });
  const sortResults = await Promise.allSettled(
    options._.map(async (positional) => {
      const fileName = node_path.basename(positional.toString());
      const sortNormalizer = await sort.createJsonSortingPreferenceNormalizer(fileName);
      const sortingPreference = sortNormalizer();
      return await sortJsonFile_function.sortJsonFile(positional.toString(), {
        sortingPreference,
        check: options.check,
        dry: options.dry,
        logger
      });
    })
  );
  if (options.check && sortResults.some((result) => result.status === "rejected" || !result.value)) {
    process.exit(1);
  }
})();
//# sourceMappingURL=sort-json.cjs.map
