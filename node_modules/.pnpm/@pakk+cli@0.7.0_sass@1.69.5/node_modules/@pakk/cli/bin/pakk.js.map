{"version":3,"file":"pakk.js","sources":["../../src/internal/yargs-for-auto-bin.function.ts","../../src/internal/yargs-for-auto-export-static.function.ts","../../src/internal/yargs-for-auto-export.function.ts","../../src/internal/yargs-for-auto-metadata.function.ts","../../src/internal/yargs-for-pakk.function.ts","../../src/bin/pakk.ts"],"sourcesContent":["import {\n\tALL_NPM_HOOKS,\n\tDEFAULT_BINSHIM_DIR,\n\tDEFAULT_BIN_DIR,\n\tDEFAULT_BIN_GLOB,\n\tDEFAULT_PACKAGE_EXPORT_IGNORES,\n\ttype AutoBinOptions,\n} from '@pakk/core';\nimport type { Argv } from 'yargs';\n\nexport const yargsForAutoBin = <T>(yargs: Argv<T>): Argv<T & AutoBinOptions> => {\n\treturn yargs\n\t\t.group(\n\t\t\t['bins', 'binIgnore', 'defaultBinIgnore', 'binBaseDir', 'enabledNpmHooks', 'shimDir'],\n\t\t\t'auto-bin',\n\t\t)\n\t\t.option('bins', {\n\t\t\tdescription:\n\t\t\t\t'The files to treat as bins elative from the `srcDir + binBaseDir` directory.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: DEFAULT_BIN_GLOB,\n\t\t})\n\t\t.option('binIgnore', {\n\t\t\tdescription:\n\t\t\t\t'What paths to ignore when collecting bins in addition to `defaultBinIgnore` so ' +\n\t\t\t\t\"you're not dropping the defaults when you just want to add additional ignore \" +\n\t\t\t\t'entries.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: [],\n\t\t})\n\t\t.option('defaultBinIgnore', {\n\t\t\tdescription: 'By default test files are excluded',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: DEFAULT_PACKAGE_EXPORT_IGNORES,\n\t\t})\n\t\t.option('binBaseDir', {\n\t\t\tdescription:\n\t\t\t\t'Relative path from `srcDir` if you want your exports to start from a different ' +\n\t\t\t\t'directory.',\n\t\t\tstring: true,\n\t\t\tdefault: DEFAULT_BIN_DIR,\n\t\t})\n\t\t.option('enabledNpmHooks', {\n\t\t\tdescription:\n\t\t\t\t\"If a bin's name matches with an entry here (which is by default every \" +\n\t\t\t\t\"NPM hook, 'postinstall' 'prebuild' etc.) then it will be automatically \" +\n\t\t\t\t\"added to your packageJson file's scripts. To not interfere with \" +\n\t\t\t\t'development, hooks invoked during install are disabled for the source ' +\n\t\t\t\t'packageJson and are only avilable in the distributed packageJson.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: ALL_NPM_HOOKS,\n\t\t})\n\t\t.option('shimDir', {\n\t\t\tdescription: 'A directory where shims for the built bins would be placed.',\n\t\t\tstring: true,\n\t\t\tdefault: DEFAULT_BINSHIM_DIR,\n\t\t});\n};\n","import { DEFAULT_STATIC_EXPORT_GLOBS, type AutoExportOptions } from '@pakk/core';\nimport type { Argv } from 'yargs';\n\nexport const yargsForAutoExportStatic = <T>(yargs: Argv<T>): Argv<T & AutoExportOptions> => {\n\treturn yargs.group(['staticExports'], 'auto-export-static').option('staticExports', {\n\t\tdescription:\n\t\t\t' Relative to cwd, a folder whats content will be simply copied to' +\n\t\t\t'`outDir` and made available using simple, additional export statements.' +\n\t\t\t\"Make sure their names don't overlap with other exports!\",\n\t\tstring: true,\n\t\tarray: true,\n\t\tdefault: DEFAULT_STATIC_EXPORT_GLOBS,\n\t});\n};\n","import {\n\tDEFAULT_PACKAGE_EXPORTS,\n\tDEFAULT_PACKAGE_EXPORT_BASEDIR,\n\tDEFAULT_PACKAGE_EXPORT_IGNORES,\n\tPackageJsonExportTarget,\n\ttype AutoExportOptions,\n} from '@pakk/core';\nimport type { Argv } from 'yargs';\n\nexport const yargsForAutoExport = <T>(yargs: Argv<T>): Argv<T & AutoExportOptions> => {\n\treturn yargs\n\t\t.group(\n\t\t\t[\n\t\t\t\t'exports',\n\t\t\t\t'exportsIgnore',\n\t\t\t\t'defaultExportsIgnore',\n\t\t\t\t'exportBaseDir',\n\t\t\t\t'developmentPackageJsonExportsTarget',\n\t\t\t],\n\t\t\t'auto-export',\n\t\t)\n\t\t.option('exports', {\n\t\t\tdescription:\n\t\t\t\t'The files to treat as entry points to be exported from relative from ' +\n\t\t\t\t'the `srcDir + exportBaseDir` directory. ' +\n\t\t\t\t\"It's usually `*` meaning all files directly here are considered the \" +\n\t\t\t\t'entry points of the library.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: DEFAULT_PACKAGE_EXPORTS,\n\t\t})\n\t\t.option('exportsIgnore', {\n\t\t\tdescription:\n\t\t\t\t'What paths to ignore when collecting exports in addition to ' +\n\t\t\t\t\"`defaultExportsIgnore` so you're not dropping the defaults when you just \" +\n\t\t\t\t' want to add additional ignore entries.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: [],\n\t\t})\n\t\t.option('defaultExportsIgnore', {\n\t\t\tdescription:\n\t\t\t\t'By default test files are excluded. ' +\n\t\t\t\t'This option is here if you deliberately want to drop the default ignores. ' +\n\t\t\t\t'Otherwise use `exportsIgnore`.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: DEFAULT_PACKAGE_EXPORT_IGNORES,\n\t\t})\n\t\t.option('exportBaseDir', {\n\t\t\tdescription:\n\t\t\t\t'Relative path to `srcDir` if you want your exports to start from a ' +\n\t\t\t\t'different directory.',\n\t\t\tstring: true,\n\t\t\tdefault: DEFAULT_PACKAGE_EXPORT_BASEDIR,\n\t\t})\n\t\t.option('developmentPackageJsonExportsTarget', {\n\t\t\tdescription: 'Where should exports point to in your development packageJson file',\n\t\t\tstring: true,\n\t\t\tchoices: [PackageJsonExportTarget.DIST, PackageJsonExportTarget.SOURCE] as const,\n\t\t\tdefault: PackageJsonExportTarget.DIST as\n\t\t\t\t| PackageJsonExportTarget.DIST\n\t\t\t\t| PackageJsonExportTarget.SOURCE,\n\t\t});\n};\n","import { DEFAULT_AUTO_METADATA_KEYS_FROM_WORKSPACE, type AutoMetadataOptions } from '@pakk/core';\nimport type { Argv } from 'yargs';\n\n/**\n * fallbackEntries and overrideEntries area missing from here, but they are\n * objects, would be awkward to use them through the cli.\n */\nexport const yargsForAutoMetadata = <T>(yargs: Argv<T>): Argv<T & AutoMetadataOptions> => {\n\treturn yargs\n\t\t.group(['keysFromWorkspace', 'mandatoryKeys'], 'auto-metadata')\n\t\t.option('keysFromWorkspace', {\n\t\t\tdescription:\n\t\t\t\t'A list of packageJson keys from the workspace root package.json to autofill ' +\n\t\t\t\t'in built artifacts.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: DEFAULT_AUTO_METADATA_KEYS_FROM_WORKSPACE,\n\t\t})\n\t\t.option('mandatoryKeys', {\n\t\t\tdescription:\n\t\t\t\t'A list of packageJson keys from the workspace root package.json to autofill ' +\n\t\t\t\t'in built artifacts.',\n\t\t\tstring: true,\n\t\t\tarray: true,\n\t\t\tdefault: DEFAULT_AUTO_METADATA_KEYS_FROM_WORKSPACE,\n\t\t});\n};\n","import {\n\tALL_VITE_LIBRARY_FORMATS,\n\tPACKAGE_JSON_KIND,\n\tpakkFeatures,\n\ttype PakkOptions,\n} from '@pakk/core';\nimport type { Argv } from 'yargs';\nimport type { PakkStandaloneOptions } from './pakk-standalone-runner.function.options.js';\n\nexport const yargsForPakk = <T>(yargs: Argv<T>): Argv<T & PakkOptions & PakkStandaloneOptions> => {\n\treturn yargs\n\t\t.option('srcDir', {\n\t\t\tdescription: 'Source root, relative to the package directory',\n\t\t\tstring: true,\n\t\t\tdefault: 'src',\n\t\t})\n\t\t.option('outDir', {\n\t\t\tdescription: \"The expected output directory relative to the package's directory.\",\n\t\t\tstring: true,\n\t\t\tdefault: 'dist',\n\t\t})\n\t\t.option('sourcePackageJson', {\n\t\t\tdescription:\n\t\t\t\t\"packageJson to modify and put in the artifact, relative to the package's directory.\",\n\t\t\tstring: true,\n\t\t\tdefault: 'package.json',\n\t\t})\n\t\t.option('autoPrettier', {\n\t\t\tdescription: 'Enable prettier integration',\n\t\t\tboolean: true,\n\t\t\tdefault: true,\n\t\t})\n\t\t.option('svelte', {\n\t\t\tdescription: 'Features for svelte libraries, like defining svelte exports',\n\t\t\tboolean: true,\n\t\t\tdefault: false,\n\t\t})\n\t\t.option('targetPackageJsonKind', {\n\t\t\tdescription: 'Which packageJson to act on. Will do both when left empty.',\n\t\t\tchoices: Object.values(PACKAGE_JSON_KIND),\n\t\t\tdefault: undefined,\n\t\t})\n\t\t.option('enabledFeatures', {\n\t\t\tdescription: 'When defined only these features will be enabled.',\n\t\t\tchoices: pakkFeatures,\n\t\t\tarray: true,\n\t\t\tstring: true,\n\t\t})\n\t\t.option('disabledFeatures', {\n\t\t\tdescription: 'When defined these features will be disabled.',\n\t\t\tchoices: pakkFeatures,\n\t\t\tarray: true,\n\t\t\tstring: true,\n\t\t})\n\t\t.option('formats', {\n\t\t\tdescription: 'What library formats to expect to be output',\n\t\t\tchoices: ALL_VITE_LIBRARY_FORMATS,\n\t\t\tarray: true,\n\t\t\tstring: true,\n\t\t});\n};\n","import {\n\tYargsBuilder,\n\tyargsForCwdOption,\n\tyargsForDryOption,\n\tyargsForLogLevelOption,\n} from '@alexaegis/cli-tools';\nimport { createLogger } from '@alexaegis/logging';\nimport type { PackageJson } from '@alexaegis/workspace-tools';\nimport packageJson from '../../package.json';\nimport { pakkStandaloneRunner } from '../internal/pakk-standalone-runner.function.js';\nimport { yargsForAutoBin } from '../internal/yargs-for-auto-bin.function.js';\nimport { yargsForAutoExportStatic } from '../internal/yargs-for-auto-export-static.function.js';\nimport { yargsForAutoExport } from '../internal/yargs-for-auto-export.function.js';\nimport { yargsForAutoMetadata } from '../internal/yargs-for-auto-metadata.function.js';\nimport { yargsForPakk } from '../internal/yargs-for-pakk.function.js';\n\nconst yarguments = YargsBuilder.withDefaults(packageJson as PackageJson)\n\t.add(yargsForPakk)\n\t.add(yargsForLogLevelOption)\n\t.add(yargsForAutoBin)\n\t.add(yargsForAutoExport)\n\t.add(yargsForAutoExportStatic)\n\t.add(yargsForAutoMetadata)\n\t.add(yargsForCwdOption)\n\t.add(yargsForDryOption)\n\t.build();\n\nvoid (async () => {\n\tconst options = await yarguments.parseAsync();\n\tconst logger = createLogger({\n\t\tname: 'pakk',\n\t\tminLevel: options.logLevel as number,\n\t});\n\n\tlogger.trace('Parsed options', options);\n\tawait pakkStandaloneRunner({ ...options, logger });\n})();\n"],"names":[],"mappings":";;;;;;;AAUa,MAAA,kBAAkB,CAAI,UAA6C;AAC/E,SAAO,MACL;AAAA,IACA,CAAC,QAAQ,aAAa,oBAAoB,cAAc,mBAAmB,SAAS;AAAA,IACpF;AAAA,EAAA,EAEA,OAAO,QAAQ;AAAA,IACf,aACC;AAAA,IACD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT,EACA,OAAO,aAAa;AAAA,IACpB,aACC;AAAA,IAGD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS,CAAC;AAAA,EAAA,CACV,EACA,OAAO,oBAAoB;AAAA,IAC3B,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT,EACA,OAAO,cAAc;AAAA,IACrB,aACC;AAAA,IAED,QAAQ;AAAA,IACR,SAAS;AAAA,EAAA,CACT,EACA,OAAO,mBAAmB;AAAA,IAC1B,aACC;AAAA,IAKD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT,EACA,OAAO,WAAW;AAAA,IAClB,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,SAAS;AAAA,EAAA,CACT;AACH;AC1Da,MAAA,2BAA2B,CAAI,UAAgD;AACpF,SAAA,MAAM,MAAM,CAAC,eAAe,GAAG,oBAAoB,EAAE,OAAO,iBAAiB;AAAA,IACnF,aACC;AAAA,IAGD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT;AACF;ACJa,MAAA,qBAAqB,CAAI,UAAgD;AACrF,SAAO,MACL;AAAA,IACA;AAAA,MACC;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACD;AAAA,IACA;AAAA,EAAA,EAEA,OAAO,WAAW;AAAA,IAClB,aACC;AAAA,IAID,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT,EACA,OAAO,iBAAiB;AAAA,IACxB,aACC;AAAA,IAGD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS,CAAC;AAAA,EAAA,CACV,EACA,OAAO,wBAAwB;AAAA,IAC/B,aACC;AAAA,IAGD,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT,EACA,OAAO,iBAAiB;AAAA,IACxB,aACC;AAAA,IAED,QAAQ;AAAA,IACR,SAAS;AAAA,EAAA,CACT,EACA,OAAO,uCAAuC;AAAA,IAC9C,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,SAAS,CAAC,wBAAwB,MAAM,wBAAwB,MAAM;AAAA,IACtE,SAAS,wBAAwB;AAAA,EAAA,CAGjC;AACH;ACzDa,MAAA,uBAAuB,CAAI,UAAkD;AAClF,SAAA,MACL,MAAM,CAAC,qBAAqB,eAAe,GAAG,eAAe,EAC7D,OAAO,qBAAqB;AAAA,IAC5B,aACC;AAAA,IAED,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT,EACA,OAAO,iBAAiB;AAAA,IACxB,aACC;AAAA,IAED,QAAQ;AAAA,IACR,OAAO;AAAA,IACP,SAAS;AAAA,EAAA,CACT;AACH;ACjBa,MAAA,eAAe,CAAI,UAAkE;AAC1F,SAAA,MACL,OAAO,UAAU;AAAA,IACjB,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,SAAS;AAAA,EAAA,CACT,EACA,OAAO,UAAU;AAAA,IACjB,aAAa;AAAA,IACb,QAAQ;AAAA,IACR,SAAS;AAAA,EAAA,CACT,EACA,OAAO,qBAAqB;AAAA,IAC5B,aACC;AAAA,IACD,QAAQ;AAAA,IACR,SAAS;AAAA,EAAA,CACT,EACA,OAAO,gBAAgB;AAAA,IACvB,aAAa;AAAA,IACb,SAAS;AAAA,IACT,SAAS;AAAA,EAAA,CACT,EACA,OAAO,UAAU;AAAA,IACjB,aAAa;AAAA,IACb,SAAS;AAAA,IACT,SAAS;AAAA,EAAA,CACT,EACA,OAAO,yBAAyB;AAAA,IAChC,aAAa;AAAA,IACb,SAAS,OAAO,OAAO,iBAAiB;AAAA,IACxC,SAAS;AAAA,EAAA,CACT,EACA,OAAO,mBAAmB;AAAA,IAC1B,aAAa;AAAA,IACb,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,EAAA,CACR,EACA,OAAO,oBAAoB;AAAA,IAC3B,aAAa;AAAA,IACb,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,EAAA,CACR,EACA,OAAO,WAAW;AAAA,IAClB,aAAa;AAAA,IACb,SAAS;AAAA,IACT,OAAO;AAAA,IACP,QAAQ;AAAA,EAAA,CACR;AACH;AC5CA,MAAM,aAAa,aAAa,aAAa,WAA0B,EACrE,IAAI,YAAY,EAChB,IAAI,sBAAsB,EAC1B,IAAI,eAAe,EACnB,IAAI,kBAAkB,EACtB,IAAI,wBAAwB,EAC5B,IAAI,oBAAoB,EACxB,IAAI,iBAAiB,EACrB,IAAI,iBAAiB,EACrB,MAAM;AAER,MAAM,YAAY;AACX,QAAA,UAAU,MAAM,WAAW;AACjC,QAAM,SAAS,aAAa;AAAA,IAC3B,MAAM;AAAA,IACN,UAAU,QAAQ;AAAA,EAAA,CAClB;AAEM,SAAA,MAAM,kBAAkB,OAAO;AACtC,QAAM,qBAAqB,EAAE,GAAG,SAAS,OAAQ,CAAA;AAClD,GAAG;"}