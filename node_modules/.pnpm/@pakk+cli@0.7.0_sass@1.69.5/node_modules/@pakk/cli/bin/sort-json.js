#!/usr/bin/env node

import { YargsBuilder, yargsForDryOption } from "@alexaegis/cli-tools";
import { createLogger } from "@alexaegis/logging";
import { createJsonSortingPreferenceNormalizer } from "@alexaegis/workspace-tools/sort";
import { basename } from "node:path";
import "yargs";
import { p as packageJson } from "../package-7ee32a93.js";
import { s as sortJsonFile } from "../sort-json-file.function-31824e7b.js";
import "@alexaegis/common";
import "@alexaegis/fs";
import "@alexaegis/workspace-tools";
const yargsForSortJson = (yargs) => {
  return yargs.option("check", {
    boolean: true,
    description: "Checks if every packageJson in a workspace conforms to the ordering, fails if not",
    default: false
  });
};
const yarguments = YargsBuilder.withDefaults(packageJson).add(yargsForSortJson).add(yargsForDryOption).build();
void (async () => {
  const options = await yarguments.parseAsync();
  const logger = createLogger({ name: "sort-json" });
  const sortResults = await Promise.allSettled(
    options._.map(async (positional) => {
      const fileName = basename(positional.toString());
      const sortNormalizer = await createJsonSortingPreferenceNormalizer(fileName);
      const sortingPreference = sortNormalizer();
      return await sortJsonFile(positional.toString(), {
        sortingPreference,
        check: options.check,
        dry: options.dry,
        logger
      });
    })
  );
  if (options.check && sortResults.some((result) => result.status === "rejected" || !result.value)) {
    process.exit(1);
  }
})();
//# sourceMappingURL=sort-json.js.map
