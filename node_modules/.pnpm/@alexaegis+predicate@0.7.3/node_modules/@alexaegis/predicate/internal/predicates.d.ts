export type Predicate<T> = (value?: T | undefined | null) => boolean;
export declare const not: <T>(predicate: Predicate<T>) => Predicate<T>;
export declare const equal: <T>(criteria: T) => (value?: T | null | undefined) => value is T;
export declare const and: <T>(...predicates: Predicate<T>[]) => Predicate<T>;
export declare const or: <T>(...predicates: Predicate<T>[]) => Predicate<T>;
export declare const contains: <T extends string>(criteria: T) => Predicate<string>;
export declare const matchRegExp: <T extends string>(criteria: RegExp) => Predicate<string>;
export declare const predicate: {
    readonly not: <T>(predicate: Predicate<T>) => Predicate<T>;
    readonly equal: <T_1>(criteria: T_1) => (value?: T_1 | null | undefined) => value is T_1;
    readonly and: <T_2>(...predicates: Predicate<T_2>[]) => Predicate<T_2>;
    readonly or: <T_3>(...predicates: Predicate<T_3>[]) => Predicate<T_3>;
    readonly contains: <T_4 extends string>(criteria: T_4) => Predicate<string>;
    readonly matchRegExp: <T_5 extends string>(criteria: RegExp) => Predicate<string>;
};
//# sourceMappingURL=predicates.d.ts.map