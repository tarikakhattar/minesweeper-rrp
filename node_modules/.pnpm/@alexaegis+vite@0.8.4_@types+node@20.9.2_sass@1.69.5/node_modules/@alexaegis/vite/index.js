import { mergeConfig } from "vite";
import { createLazyAutoExternalsFunction, pakk } from "vite-plugin-pakk";
import { pakk as pakk2 } from "vite-plugin-pakk";
import { createLogger } from "@alexaegis/logging";
const isAbsolute = (path) => {
  return path.startsWith("/");
};
const toBaseHref = (path = "") => {
  const trimmed = path.replace(/\/$/, "");
  if (trimmed) {
    return isAbsolute(trimmed) ? trimmed : `/${trimmed}`;
  } else {
    return "";
  }
};
const DEFAULT_OUT_DIR = "dist";
const DEFAULT_ENTRY = ["src/index.ts"];
const DEFAULT_EXPORT_FORMATS = ["es", "cjs"];
const DEFAULT_BUILD_TARGET = "es2022";
const DEFAULT_VITE_CONFIG = {
  build: {
    target: DEFAULT_BUILD_TARGET,
    outDir: DEFAULT_OUT_DIR
  }
};
const DEFAULT_VITE_APP_CONFIG = mergeConfig(DEFAULT_VITE_CONFIG, {
  base: toBaseHref(process.env["BASE_HREF"])
});
const DEFAULT_VITE_LIB_CONFIG = mergeConfig(DEFAULT_VITE_CONFIG, {
  build: {
    minify: false,
    sourcemap: true,
    rollupOptions: {
      external: createLazyAutoExternalsFunction(),
      // I'm always using this, but autolib also adds it with the other defaults if they are not defined
      treeshake: true
    },
    lib: {
      entry: DEFAULT_ENTRY,
      formats: DEFAULT_EXPORT_FORMATS
    }
  }
});
const DEFAULT_VITE_JS_LIB_CONFIG = mergeConfig(DEFAULT_VITE_LIB_CONFIG, {
  build: {
    rollupOptions: {
      output: {
        preserveModules: true
        // Otherwise type paths would be mangled
      }
    }
  },
  esbuild: false
  // esbuild always removes comments, and JSDoc wouldn't work
});
const defineAppConfig = (config) => mergeConfig(DEFAULT_VITE_CONFIG, config);
const defineLibConfig = (config) => mergeConfig(DEFAULT_VITE_LIB_CONFIG, config);
const disabledPlugin = (disabledPluginName) => {
  const name = `disabled:${disabledPluginName}`;
  const logger = createLogger({
    name: `vite:${name}`
  });
  return {
    name,
    buildStart: () => {
      logger.info(`Skipping plugin ${disabledPluginName}`);
    }
  };
};
const conditionalPlugin = (plugin, condition) => {
  if (condition()) {
    return plugin;
  } else {
    let name = "unknown";
    if (typeof plugin === "object" && plugin.name) {
      name = plugin.name;
    }
    return disabledPlugin(name);
  }
};
const isTargetEnvNotLocal = () => process.env["TARGET_ENV"]?.toLowerCase() !== "local";
const libraryViteConfig = defineLibConfig({
  plugins: [conditionalPlugin(pakk(), isTargetEnvNotLocal)]
});
export {
  DEFAULT_BUILD_TARGET,
  DEFAULT_ENTRY,
  DEFAULT_EXPORT_FORMATS,
  DEFAULT_OUT_DIR,
  DEFAULT_VITE_APP_CONFIG,
  DEFAULT_VITE_CONFIG,
  DEFAULT_VITE_JS_LIB_CONFIG,
  DEFAULT_VITE_LIB_CONFIG,
  conditionalPlugin,
  defineAppConfig,
  defineLibConfig,
  disabledPlugin,
  isAbsolute,
  isTargetEnvNotLocal,
  libraryViteConfig,
  pakk2 as pakk,
  toBaseHref
};
