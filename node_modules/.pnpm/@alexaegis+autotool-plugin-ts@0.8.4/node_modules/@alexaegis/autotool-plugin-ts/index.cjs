"use strict";
Object.defineProperties(exports, { __esModule: { value: true }, [Symbol.toStringTag]: { value: "Module" } });
const predicate = require("@alexaegis/predicate");
const workspaceTools = require("@alexaegis/workspace-tools");
const node_path = require("node:path");
const name = "@alexaegis/autotool-plugin-ts";
const description = "TypeScript setup";
const version = "0.8.4";
const license = "MIT";
const archetype = {
  platform: "node",
  framework: "autotool",
  language: "ts",
  kind: "lib"
};
const keywords = [
  "autotool-plugin",
  "managed-by-autotool",
  "ts",
  "tsconfig",
  "typescript"
];
const type = "module";
const publishConfig = {
  access: "public"
};
const scripts = {
  build: "turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  "build-lib_": "vite build",
  "lint:depcheck": "turbo run lint:depcheck_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  "lint:depcheck_": "depcheck",
  "lint:es": "turbo run lint:es_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  "lint:es_": "eslint --max-warnings=0 --fix --no-error-on-unmatched-pattern .",
  "lint:format": "turbo run lint:format_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  "lint:format_": "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --check .",
  "lint:md": "turbo run lint:md_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  "lint:md_": "remark --frail --no-stdout --silently-ignore .",
  "lint:tsc": "turbo run lint:tsc_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  "lint:tsc_": "tsc --noEmit",
  publint: "BUILD_REASON='publish' turbo run publint_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  publint_: "publint dist",
  all: "BUILD_REASON='publish' turbo run all_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  format: "turbo run format_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  format_: "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --write .",
  test: "turbo run test_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-ts",
  test_: "vitest --passWithNoTests --coverage --run",
  "test:watch": "vitest --passWithNoTests --coverage"
};
const exports$1 = {
  ".": {
    types: "./src/index.ts",
    "import": "./dist/index.js",
    require: "./dist/index.cjs",
    "default": "./dist/index.js"
  },
  "./package-composite-tsconfig": "./static/package-composite-tsconfig.json",
  "./package-simple-tsconfig": "./static/package-simple-tsconfig.json",
  "./package-spec-vitest-tsconfig": "./static/package-spec-vitest-tsconfig.json",
  "./readme": "./readme.md",
  "./workspace-tsconfig": "./static/workspace-tsconfig.json"
};
const dependencies = {
  "@alexaegis/logging": "^0.7.2",
  "@alexaegis/match": "^0.7.2",
  "@alexaegis/predicate": "^0.7.2",
  "@alexaegis/workspace-tools": "^0.7.2",
  "autotool-plugin": "^0.3.0",
  typescript: "^5.2.2"
};
const devDependencies = {
  "@alexaegis/eslint-config-vitest": "^0.8.4",
  "@alexaegis/ts": "^0.8.4",
  "@alexaegis/vite": "^0.8.4",
  "@alexaegis/vitest": "^0.8.4",
  "@types/node": "^20.9.0",
  publint: "^0.2.5",
  "ts-node": "^10.9.1",
  vite: "^4.5.0",
  vitest: "^0.34.6"
};
const packageJson = {
  name,
  description,
  version,
  license,
  "private": false,
  archetype,
  keywords,
  type,
  publishConfig,
  scripts,
  exports: exports$1,
  dependencies,
  devDependencies
};
const plugin = (_options) => {
  const languageMatcher = /^(ts|js)$/;
  const archetypeFlavours = [
    { language: languageMatcher, platform: "web", framework: predicate.not(predicate.contains("svelte")) },
    { language: languageMatcher, platform: "node", framework: predicate.not(predicate.contains("svelte")) },
    { language: languageMatcher, platform: void 0, framework: void 0 }
  ];
  return {
    name: packageJson.name,
    elements: [
      {
        description: "copy workspace root ts config",
        executor: "fileCopy",
        packageKind: "root",
        formatWithPrettier: true,
        targetFile: "tsconfig.json",
        sourcePluginPackageName: packageJson.name,
        sourceFile: node_path.join("static", "workspace-tsconfig.json")
      },
      {
        description: "add workspace root ts scripts",
        executor: "packageJson",
        packageKind: "root",
        data: {
          scripts: {
            "lint:tsc": "turbo run lint:tsc_ --concurrency 16 --cache-dir .cache/turbo"
          },
          devDependencies: {
            "@alexaegis/ts": `^${packageJson.version}`,
            // For the root tsConfig
            typescript: packageJson.dependencies.typescript,
            "ts-node": packageJson.devDependencies["ts-node"]
          }
        }
      },
      {
        description: "add package ts scripts",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          archetype: {
            language: languageMatcher
          }
        },
        data: {
          scripts: {
            "lint:tsc": "turbo run lint:tsc_ --concurrency 16 --cache-dir .cache/turbo --filter ${packageName}",
            "lint:tsc_": "tsc --noEmit"
          }
        }
      },
      {
        description: "add workspace dependency for the ts configs",
        executor: "packageJson",
        packageKind: "root",
        data: {
          devDependencies: {
            "@alexaegis/ts": `^${packageJson.version}`
          }
        }
      },
      {
        description: "add package dependency for the ts configs",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          archetype: {
            language: languageMatcher
          },
          name: predicate.not(
            predicate.or(
              predicate.equal("@alexaegis/ts"),
              predicate.equal("@alexaegis/vite"),
              predicate.equal("@alexaegis/vitest"),
              predicate.equal("@alexaegis/eslint-config-vitest")
            )
          )
          // Don't add a dependency for itself, and other packages where it would result in a circle
        },
        data: {
          devDependencies: {
            "@alexaegis/ts": `^${packageJson.version}`
          }
        }
      },
      {
        description: "remove unnecessary tsconfig files",
        executor: "fileRemove",
        targetFilePatterns: "tsconfig.!(json)"
      },
      {
        description: "add @types/node as a devDependency",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          archetype: {
            language: languageMatcher,
            framework: predicate.or(predicate.equal("node"), predicate.equal("svelte"))
          }
        },
        data: {
          devDependencies: {
            "@types/node": packageJson.devDependencies["@types/node"]
          }
        }
      },
      ...archetypeFlavours.map((archetype2) => {
        const flavour = workspaceTools.getEncodedArchetype(archetype2);
        return {
          description: `copy tsconfig for ${flavour} packages`,
          executor: "fileCopy",
          packageKind: "regular",
          formatWithPrettier: true,
          targetFile: "tsconfig.json",
          sourcePluginPackageName: packageJson.name,
          packageJsonFilter: {
            archetype: archetype2
          },
          sourceFile: node_path.join("static", "package-simple-tsconfig.json"),
          templateVariables: {
            flavour
          }
        };
      })
    ]
  };
};
exports.default = plugin;
exports.plugin = plugin;
