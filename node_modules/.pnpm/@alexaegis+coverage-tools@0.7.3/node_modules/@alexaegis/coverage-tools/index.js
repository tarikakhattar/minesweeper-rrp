import { isNullish, asyncFilterMap } from "@alexaegis/common";
import { normalizeCollectWorkspacePackagesOptions, getWorkspaceRoot, collectWorkspacePackages, NODE_MODULES_DIRECTORY_NAME } from "@alexaegis/workspace-tools";
import { globby } from "globby";
import { readFile } from "node:fs/promises";
const normalizeCollectLcovReportPathsOptions = (options) => {
  const { onlyWorkspaceRoot, skipWorkspaceRoot, ...rest } = normalizeCollectWorkspacePackagesOptions(options);
  return rest;
};
const LCOV_INFO_FILE_NAME = "lcov.info";
const collectLcovReportPaths = async (rawOptions) => {
  const options = normalizeCollectLcovReportPathsOptions(rawOptions);
  const workspaceRoot = getWorkspaceRoot(options);
  if (isNullish(workspaceRoot)) {
    return [];
  }
  const workspacePackages = await collectWorkspacePackages({
    ...options,
    skipWorkspaceRoot: true
  });
  const lcovPathResults = await Promise.all(
    workspacePackages.map(
      (workspacePackage) => globby([`${workspacePackage.packagePath}/**/${LCOV_INFO_FILE_NAME}`], {
        absolute: true,
        onlyFiles: true,
        cwd: workspaceRoot,
        ignore: [`**/${NODE_MODULES_DIRECTORY_NAME}`]
      })
    )
  );
  return lcovPathResults.flat();
};
const mergeLcovReportsInWorkspace = async (rawOptions) => {
  const options = normalizeCollectWorkspacePackagesOptions(rawOptions);
  const lcovPaths = await collectLcovReportPaths(rawOptions);
  options.logger.info(
    `found the following lcov files in the workpace:
	- ${lcovPaths.join("\n	- ")}`
  );
  const allLcovReports = await asyncFilterMap(
    lcovPaths,
    (path) => readFile(path, {
      encoding: "utf8"
    }).catch(() => void 0)
  );
  return allLcovReports.join("\n");
};
export {
  LCOV_INFO_FILE_NAME,
  collectLcovReportPaths,
  mergeLcovReportsInWorkspace
};
