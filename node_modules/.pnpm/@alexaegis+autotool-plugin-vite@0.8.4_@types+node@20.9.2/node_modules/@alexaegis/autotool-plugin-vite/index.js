import { not, contains, equal, and } from "@alexaegis/predicate";
import "autotool-plugin";
import { join } from "node:path";
const name = "@alexaegis/autotool-plugin-vite";
const description = "Setup vite";
const version = "0.8.4";
const license = "MIT";
const archetype = {
  platform: "node",
  framework: "autotool",
  language: "ts",
  kind: "lib"
};
const keywords = [
  "autotool-plugin",
  "managed-by-autotool",
  "vite"
];
const type = "module";
const publishConfig = {
  access: "public"
};
const scripts = {
  build: "turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  "build-lib_": "vite build",
  "lint:depcheck": "turbo run lint:depcheck_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  "lint:depcheck_": "depcheck",
  "lint:es": "turbo run lint:es_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  "lint:es_": "eslint --max-warnings=0 --fix --no-error-on-unmatched-pattern .",
  "lint:format": "turbo run lint:format_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  "lint:format_": "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --check .",
  "lint:md": "turbo run lint:md_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  "lint:md_": "remark --frail --no-stdout --silently-ignore .",
  "lint:tsc": "turbo run lint:tsc_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  "lint:tsc_": "tsc --noEmit",
  publint: "BUILD_REASON='publish' turbo run publint_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  publint_: "publint dist",
  all: "BUILD_REASON='publish' turbo run all_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  format: "turbo run format_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  format_: "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --write .",
  test: "turbo run test_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/autotool-plugin-vite",
  test_: "vitest --passWithNoTests --coverage --run",
  "test:watch": "vitest --passWithNoTests --coverage"
};
const exports = {
  ".": {
    types: "./src/index.ts",
    "import": "./dist/index.js",
    require: "./dist/index.cjs",
    "default": "./dist/index.js"
  },
  "./dev.js": "./static/dev.js.txt",
  "./readme": "./readme.md",
  "./vite-jslib.config": "./static/vite-jslib.config.ts",
  "./vite-lib.config": "./static/vite-lib.config.ts"
};
const dependencies = {
  "@alexaegis/logging": "^0.7.2",
  "@alexaegis/predicate": "^0.7.2",
  "autotool-plugin": "^0.3.0",
  vite: "^4.5.0"
};
const devDependencies = {
  "@alexaegis/eslint-config-vitest": "^0.8.4",
  "@alexaegis/ts": "^0.8.4",
  "@alexaegis/vite": "^0.8.4",
  "@alexaegis/vitest": "^0.8.4",
  "@types/node": "^20.9.0",
  publint: "^0.2.5",
  turbowatch: "^2.29.4",
  typescript: "^5.2.2",
  vite: "^4.5.0",
  vitest: "^0.34.6"
};
const packageJson = {
  name,
  description,
  version,
  license,
  "private": false,
  archetype,
  keywords,
  type,
  publishConfig,
  scripts,
  exports,
  dependencies,
  devDependencies
};
const plugin = (_options) => {
  return {
    name: packageJson.name,
    elements: [
      {
        description: "package vite config file for libraries",
        executor: "fileCopy",
        packageJsonFilter: {
          archetype: {
            kind: "lib",
            framework: not(contains("svelte")),
            // Svelte libraries are not built by vite but svelte-package
            language: "ts"
          }
        },
        packageKind: "regular",
        formatWithPrettier: true,
        sourceFile: join("static", "vite-lib.config.ts"),
        targetFile: "vite.config.ts",
        sourcePluginPackageName: packageJson.name
      },
      {
        description: "package vite config file for libraries",
        executor: "fileCopy",
        packageJsonFilter: {
          archetype: {
            kind: "lib",
            framework: not(contains("svelte")),
            // Svelte libraries are not built by vite but svelte-package
            language: "js"
          }
        },
        packageKind: "regular",
        formatWithPrettier: true,
        sourceFile: join("static", "vite-jslib.config.ts"),
        targetFile: "vite.config.ts",
        sourcePluginPackageName: packageJson.name
      },
      {
        description: "workspace build scripts",
        executor: "packageJson",
        packageKind: "root",
        data: {
          scripts: {
            build: "turbo run build-lib_ build-app_ --concurrency 16 --cache-dir .cache/turbo",
            "build-lib": "turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo",
            "build-app": "turbo run build-app_ --concurrency 16 --cache-dir .cache/turbo"
          }
        }
      },
      {
        description: "package devDependencies for libraries",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          name: not(equal("@alexaegis/vite")),
          // Don't add it for itself, `vite` itself is a regular dependency of it anyway
          archetype: {
            kind: equal("lib"),
            framework: not(contains("svelte"))
            // svelte libraries don't use vite, they use svelte-package
          }
        },
        data: {
          devDependencies: {
            ["@alexaegis/vite"]: packageJson.devDependencies["@alexaegis/vite"],
            vite: packageJson.dependencies.vite
          }
        }
      },
      {
        description: "package devDependencies for applications",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          name: not(equal("@alexaegis/vite")),
          // Don't add it for itself, `vite` itself is a regular dependency of it anyway
          archetype: {
            kind: equal("app")
          }
        },
        data: {
          devDependencies: {
            ["@alexaegis/vite"]: packageJson.devDependencies["@alexaegis/vite"],
            vite: packageJson.dependencies.vite
          }
        }
      },
      {
        description: "package build scripts for libraries",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          archetype: {
            kind: "lib",
            framework: and(not(contains("svelte")), not(contains("angular")))
          }
        },
        data: {
          scripts: {
            build: "turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo --filter ${packageName}",
            "build-lib_": "vite build"
          }
        }
      },
      {
        description: "package turbowatch file for apps",
        executor: "fileCopy",
        packageJsonFilter: {
          archetype: {
            kind: "app"
          }
        },
        packageKind: "regular",
        formatWithPrettier: true,
        sourceFile: join("static", "dev.js.txt"),
        targetFile: "dev.js",
        sourcePluginPackageName: packageJson.name
      },
      {
        description: "package build scripts for apps and additional devDependencies",
        executor: "packageJson",
        packageKind: "regular",
        packageJsonFilter: {
          archetype: {
            kind: "app"
          }
        },
        data: {
          scripts: {
            build: "turbo run build-app_ --concurrency 16 --cache-dir .cache/turbo --filter ${packageName}",
            "build-app_": "vite build",
            start_: "TARGET_ENV='local' vite",
            // This could later be changed to a start command that is not a dev server, but reflects a more production state
            "build:dependencies": "TARGET_ENV='local' turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo --filter ${packageName} # used by turbowatch",
            start: "turbo run start_ --concurrency 16 --cache-dir .cache/turbo --filter ${packageName}",
            dev: "turbowatch dev.js",
            dev_: "TARGET_ENV='local' vite"
          },
          devDependencies: {
            turbowatch: packageJson.devDependencies.turbowatch,
            "@alexaegis/turbowatch": packageJson.version
            // versioned together
          }
        }
      }
    ]
  };
};
export {
  plugin as default,
  plugin
};
