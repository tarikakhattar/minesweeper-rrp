{"version":3,"file":"to-base-href.function.cjs","sources":["../../src/internal/to-base-href.function.js"],"sourcesContent":["/**\n * A ts copy of this file exists at\n * packages/vite/src/helpers/to-base-href.function.ts\n */\n\n/**\n * @param {string} path\n * @returns {path is import('./types.js').AbsolutePath}\n */\nexport const isAbsolute = (path) => {\n\treturn path.startsWith('/');\n};\n\n/**\n * Normalizes a string that is either an empty string, or if not it\n * starts with a / but does not ends with one.\n *\n * The reason for this limitation is to let the base variable be trivially\n * joined with other paths like this: `${base}/foo`\n *\n * @param {string} path\n * @returns {import('./types.js').AbsolutePath | ''}\n */\nexport const toBaseHref = (path = '') => {\n\tconst trimmed = path.replace(/\\/$/, ''); // Must not end with '/'\n\tif (trimmed) {\n\t\treturn isAbsolute(trimmed) ? trimmed : `/${trimmed}`;\n\t} else {\n\t\treturn '';\n\t}\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,GAAG,CAAC,IAAI,KAAK;AACpC,CAAC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;AAC7B,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,MAAC,UAAU,GAAG,CAAC,IAAI,GAAG,EAAE,KAAK;AACzC,CAAC,MAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACzC,CAAC,IAAI,OAAO,EAAE;AACd,EAAE,OAAO,UAAU,CAAC,OAAO,CAAC,GAAG,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;AACvD,EAAE,MAAM;AACR,EAAE,OAAO,EAAE,CAAC;AACZ,EAAE;AACF;;;;;"}