import { type AutotoolElement, type ExecutorMap, type PackageResolvedElement, type UntargetedAutotoolElement } from 'autotool-plugin';
export declare const isElementUntargeted: <Elements extends UntargetedAutotoolElement<string> = UntargetedAutotoolElement<string>>(element: UntargetedAutotoolElement<Elements["executor"]>, executorMap: ExecutorMap<Elements>) => element is UntargetedAutotoolElement<Elements["executor"]>;
export declare const isElementTargeted: <Elements extends UntargetedAutotoolElement<string> = UntargetedAutotoolElement<string>>(element: UntargetedAutotoolElement<Elements["executor"]>, executorMap: ExecutorMap<Elements>) => element is AutotoolElement<Elements["executor"]>;
export declare const isPackageElementUntargeted: <Elements extends UntargetedAutotoolElement<string> = UntargetedAutotoolElement<string>>(packageElement: PackageResolvedElement<Elements>, executorMap: ExecutorMap<Elements>) => packageElement is PackageResolvedElement<Elements>;
export declare const isPackageElementTargeted: <Elements extends UntargetedAutotoolElement<string> = UntargetedAutotoolElement<string>>(packageElement: PackageResolvedElement, executorMap: ExecutorMap<Elements>) => packageElement is PackageResolvedElement<AutotoolElement<Elements["executor"]>>;
/**
 * This extra function lets me use the type assert functionm directly,
 * letting typescript infer the return type
 */
export declare const createIsPackageElementTargeted: <Elements extends UntargetedAutotoolElement<string> = UntargetedAutotoolElement<string>>(executorMap: ExecutorMap<Elements>) => (packageElement: PackageResolvedElement) => packageElement is PackageResolvedElement<AutotoolElement<Elements["executor"]>>;
//# sourceMappingURL=is-element-untargeted.function.d.ts.map