#!/usr/bin/env node

import { yargsForCollectWorkspacePackagesOptions, yargsForLogLevelOption, yargsForDryOption, yargsForForceOption, yargsForCwdOption, YargsBuilder } from "@alexaegis/cli-tools";
import { createLogger } from "@alexaegis/logging";
import "@alexaegis/common";
import "node:fs";
import "node:path";
import "@alexaegis/match";
import "globby";
import "autotool-plugin";
import { t as findInstalledPlugins, r as autotool } from "../autotool.function-40ea481f.js";
import "@alexaegis/fs";
import "@alexaegis/workspace-tools";
import "microdiff";
import "node:child_process";
import "autotool-plugin-default";
const name = "autotool";
const description = "Workspace transformation orchestrator";
const version = "0.3.0";
const license = "MIT";
const archetype = {
  platform: "node",
  language: "ts",
  kind: "lib",
  disabledPlugins: [
    "@alexaegis/autolib-plugin-ts"
  ]
};
const keywords = [
  "autotool",
  "managed-by-autotool"
];
const type = "module";
const config = {
  "engine-strict": false
};
const publishConfig = {
  access: "public"
};
const scripts = {
  build: "turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  "build-lib_": "vite build",
  "lint:depcheck": "turbo run lint:depcheck_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  "lint:depcheck_": "depcheck",
  "lint:es": "turbo run lint:es_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  "lint:es_": "eslint --max-warnings=0 --fix --no-error-on-unmatched-pattern .",
  "lint:format": "turbo run lint:format_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  "lint:format_": "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --check .",
  "lint:md": "turbo run lint:md_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  "lint:md_": "remark --frail --no-stdout --silently-ignore .",
  "lint:tsc": "turbo run lint:tsc_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  "lint:tsc_": "tsc --noEmit",
  publint: "BUILD_REASON='publish' turbo run publint_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  publint_: "publint dist",
  all: "BUILD_REASON='publish' turbo run all_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  format: "turbo run format_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  format_: "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --write .",
  test: "turbo run test_ --concurrency 16 --cache-dir .cache/turbo --filter autotool",
  test_: "vitest --passWithNoTests --coverage --run",
  "test:watch": "vitest --passWithNoTests --coverage"
};
const exports = {
  ".": {
    types: "./src/index.ts",
    "import": "./dist/index.js",
    require: "./dist/index.cjs",
    "default": "./dist/index.js"
  },
  "./readme": "./readme.md"
};
const bin = {
  autotool: "./shims/autotool.js"
};
const dependencies = {
  "@alexaegis/cli-tools": "^0.7.0",
  "@alexaegis/common": "^0.7.0",
  "@alexaegis/fs": "^0.7.0",
  "@alexaegis/logging": "^0.7.0",
  "@alexaegis/match": "^0.7.0",
  "@alexaegis/workspace-tools": "^0.7.0",
  "autotool-plugin": "^0.3.0",
  "autotool-plugin-default": "^0.3.0",
  globby: "^13.2.2",
  microdiff: "^1.3.2"
};
const devDependencies = {
  "@alexaegis/eslint-config-vitest": "^0.8.1",
  "@alexaegis/ts": "^0.8.1",
  "@alexaegis/vite": "^0.8.1",
  "@alexaegis/vitest": "^0.8.1",
  "@types/node": "^20.5.8",
  "@types/yargs": "17.0.24",
  publint: "^0.2.2",
  typescript: "^5.2.2",
  vite: "^4.4.9",
  vitest: "^0.34.3"
};
const packageJson = {
  name,
  description,
  version,
  license,
  "private": false,
  archetype,
  keywords,
  type,
  config,
  publishConfig,
  scripts,
  exports,
  bin,
  dependencies,
  devDependencies
};
const yargsForAutotool = (yargs) => {
  return yargsForCollectWorkspacePackagesOptions(
    yargsForLogLevelOption(yargsForDryOption(yargsForForceOption(yargsForCwdOption(yargs))))
  ).option("dryish", {
    boolean: true,
    default: false,
    description: "Execute excutors, and trust them that they don't actually write anything to the disk"
  }).option("listPlugins", {
    boolean: true,
    default: false,
    description: "Lists all installed plugins"
  }).option("enabledPlugins", {
    array: true,
    string: true,
    description: "Use only these plugins. Will use all discoverable plugins that are not also disabled when empty or not provided"
  }).option("disabledPlugins", {
    array: true,
    string: true,
    description: "Do not use these plugins. Regardless if they are explicity enabled or not. Does not have an effect when left empty"
  });
};
const yarguments = YargsBuilder.withDefaults(packageJson).add(yargsForAutotool).build();
void (async () => {
  const args = await yarguments.parseAsync();
  const options = {
    ...args,
    logger: createLogger({
      // TODO: try to make this automatic during parse using maybe 'coerce'
      name: packageJson.name,
      minLevel: args.logLevel
    })
  };
  if (options.listPlugins) {
    const installedPlugins = await findInstalledPlugins(options);
    console.info(installedPlugins.join("\n"));
  } else {
    await autotool(options);
  }
})();
