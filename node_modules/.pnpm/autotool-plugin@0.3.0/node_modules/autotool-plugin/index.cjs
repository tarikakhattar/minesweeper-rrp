"use strict";
Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
const promises = require("node:fs/promises");
const common = require("@alexaegis/common");
const fs = require("@alexaegis/fs");
const logging = require("@alexaegis/logging");
const workspaceTools = require("@alexaegis/workspace-tools");
const node_path = require("node:path");
const isAutotoolElementCustom = (element) => {
  return element.executor === "custom";
};
const isAutotoolElementFileCopy = (element) => {
  return element.executor === "fileCopy";
};
const isAutotoolElementFileRemove = (element) => {
  return element.executor === "fileRemove";
};
const isAutotoolElementFileSymlink = (element) => {
  return element.executor === "fileSymlink";
};
const isAutotoolElementPackageJson = (element) => {
  return element.executor === "packageJson";
};
const AUTOTOOL_MARK = "managed-by-autotool";
const OLD_MARK = "autogenerated";
const isManagedContent = (content, mark = AUTOTOOL_MARK) => {
  return content.includes(mark) || content.includes(OLD_MARK);
};
const isManagedFile = async (path, mark = AUTOTOOL_MARK) => {
  try {
    const content = await promises.readFile(path, { encoding: "utf8" });
    return isManagedContent(content, mark);
  } catch (error) {
    return error.code === "ENOENT";
  }
};
const keepOnlyFirst = (elements) => {
  const first = elements[0];
  return first ? [first] : [];
};
const AUTOTOOL_PLUGIN_NAME_PREFIX = "autotool-plugin";
const normalizeAutotoolPluginOptions = (options) => {
  return {
    ...fs.normalizeCwdOption(options),
    ...logging.normalizeLoggerOption(options),
    ...common.normalizeDryOption(options),
    ...common.normalizeForceOption(options),
    rootWorkspacePackage: options.rootWorkspacePackage
  };
};
const normalizeAutotoolOptions = (options) => {
  return {
    ...fs.normalizeCwdOption(options),
    ...logging.normalizeLoggerOption(options),
    ...common.normalizeDryOption(options),
    ...common.normalizeForceOption(options),
    ...workspaceTools.normalizeCollectWorkspacePackagesOptions(options),
    enabledPlugins: options?.enabledPlugins?.map(common.normalizeRegExpLikeToRegExp) ?? [],
    disabledPlugins: options?.disabledPlugins?.map(common.normalizeRegExpLikeToRegExp) ?? [],
    dryish: options?.dryish ?? false,
    listPlugins: options?.listPlugins ?? false,
    maxAllowedRecursion: options?.maxAllowedRecursion ?? 3
  };
};
const getAssumedFinalInstallLocationOfPackage = (rootWorkspacePackage, packageJsonName) => {
  return node_path.join(rootWorkspacePackage.packagePath, "node_modules", ...packageJsonName.split("/"));
};
exports.AUTOTOOL_MARK = AUTOTOOL_MARK;
exports.AUTOTOOL_PLUGIN_NAME_PREFIX = AUTOTOOL_PLUGIN_NAME_PREFIX;
exports.OLD_MARK = OLD_MARK;
exports.getAssumedFinalInstallLocationOfPackage = getAssumedFinalInstallLocationOfPackage;
exports.isAutotoolElementCustom = isAutotoolElementCustom;
exports.isAutotoolElementFileCopy = isAutotoolElementFileCopy;
exports.isAutotoolElementFileRemove = isAutotoolElementFileRemove;
exports.isAutotoolElementFileSymlink = isAutotoolElementFileSymlink;
exports.isAutotoolElementPackageJson = isAutotoolElementPackageJson;
exports.isManagedContent = isManagedContent;
exports.isManagedFile = isManagedFile;
exports.keepOnlyFirst = keepOnlyFirst;
exports.normalizeAutotoolOptions = normalizeAutotoolOptions;
exports.normalizeAutotoolPluginOptions = normalizeAutotoolPluginOptions;
