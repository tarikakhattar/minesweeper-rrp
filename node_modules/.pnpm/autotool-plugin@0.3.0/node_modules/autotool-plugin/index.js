import { readFile } from "node:fs/promises";
import { normalizeDryOption, normalizeForceOption, normalizeRegExpLikeToRegExp } from "@alexaegis/common";
import { normalizeCwdOption } from "@alexaegis/fs";
import { normalizeLoggerOption } from "@alexaegis/logging";
import { normalizeCollectWorkspacePackagesOptions } from "@alexaegis/workspace-tools";
import { join } from "node:path";
const isAutotoolElementCustom = (element) => {
  return element.executor === "custom";
};
const isAutotoolElementFileCopy = (element) => {
  return element.executor === "fileCopy";
};
const isAutotoolElementFileRemove = (element) => {
  return element.executor === "fileRemove";
};
const isAutotoolElementFileSymlink = (element) => {
  return element.executor === "fileSymlink";
};
const isAutotoolElementPackageJson = (element) => {
  return element.executor === "packageJson";
};
const AUTOTOOL_MARK = "managed-by-autotool";
const OLD_MARK = "autogenerated";
const isManagedContent = (content, mark = AUTOTOOL_MARK) => {
  return content.includes(mark) || content.includes(OLD_MARK);
};
const isManagedFile = async (path, mark = AUTOTOOL_MARK) => {
  try {
    const content = await readFile(path, { encoding: "utf8" });
    return isManagedContent(content, mark);
  } catch (error) {
    return error.code === "ENOENT";
  }
};
const keepOnlyFirst = (elements) => {
  const first = elements[0];
  return first ? [first] : [];
};
const AUTOTOOL_PLUGIN_NAME_PREFIX = "autotool-plugin";
const normalizeAutotoolPluginOptions = (options) => {
  return {
    ...normalizeCwdOption(options),
    ...normalizeLoggerOption(options),
    ...normalizeDryOption(options),
    ...normalizeForceOption(options),
    rootWorkspacePackage: options.rootWorkspacePackage
  };
};
const normalizeAutotoolOptions = (options) => {
  return {
    ...normalizeCwdOption(options),
    ...normalizeLoggerOption(options),
    ...normalizeDryOption(options),
    ...normalizeForceOption(options),
    ...normalizeCollectWorkspacePackagesOptions(options),
    enabledPlugins: options?.enabledPlugins?.map(normalizeRegExpLikeToRegExp) ?? [],
    disabledPlugins: options?.disabledPlugins?.map(normalizeRegExpLikeToRegExp) ?? [],
    dryish: options?.dryish ?? false,
    listPlugins: options?.listPlugins ?? false,
    maxAllowedRecursion: options?.maxAllowedRecursion ?? 3
  };
};
const getAssumedFinalInstallLocationOfPackage = (rootWorkspacePackage, packageJsonName) => {
  return join(rootWorkspacePackage.packagePath, "node_modules", ...packageJsonName.split("/"));
};
export {
  AUTOTOOL_MARK,
  AUTOTOOL_PLUGIN_NAME_PREFIX,
  OLD_MARK,
  getAssumedFinalInstallLocationOfPackage,
  isAutotoolElementCustom,
  isAutotoolElementFileCopy,
  isAutotoolElementFileRemove,
  isAutotoolElementFileSymlink,
  isAutotoolElementPackageJson,
  isManagedContent,
  isManagedFile,
  keepOnlyFirst,
  normalizeAutotoolOptions,
  normalizeAutotoolPluginOptions
};
