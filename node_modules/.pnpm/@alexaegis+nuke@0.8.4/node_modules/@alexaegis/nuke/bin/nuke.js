#!/usr/bin/env node

import { DEFAULT_NUKE_LIST, DEFAULT_NUKE_GLOBS, nuke } from "../index.js";
import { YargsBuilder, yargsForCollectWorkspacePackagesOptions, yargsForLogLevelOption } from "@alexaegis/cli-tools";
import { createLogger } from "@alexaegis/logging";
import "@alexaegis/common";
import "@alexaegis/workspace-tools";
import "globby";
import "node:fs";
import "node:fs/promises";
import "node:path";
const name = "@alexaegis/nuke";
const description = "Nuke stuff";
const version = "0.8.4";
const license = "MIT";
const archetype = {
  platform: "node",
  language: "ts",
  kind: "lib"
};
const keywords = [
  "clean",
  "managed-by-autotool",
  "nuke"
];
const type = "module";
const publishConfig = {
  access: "public"
};
const scripts = {
  build: "turbo run build-lib_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  "build-lib_": "vite build",
  "lint:depcheck": "turbo run lint:depcheck_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  "lint:depcheck_": "depcheck",
  "lint:es": "turbo run lint:es_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  "lint:es_": "eslint --max-warnings=0 --fix --no-error-on-unmatched-pattern .",
  "lint:format": "turbo run lint:format_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  "lint:format_": "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --check .",
  "lint:md": "turbo run lint:md_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  "lint:md_": "remark --frail --no-stdout --silently-ignore .",
  "lint:tsc": "turbo run lint:tsc_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  "lint:tsc_": "tsc --noEmit",
  publint: "BUILD_REASON='publish' turbo run publint_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  publint_: "publint dist",
  all: "BUILD_REASON='publish' turbo run all_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  format: "turbo run format_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  format_: "prettier --cache-location .cache/prettier --plugin prettier-plugin-svelte --plugin prettier-plugin-tailwindcss --write .",
  test: "turbo run test_ --concurrency 16 --cache-dir .cache/turbo --filter @alexaegis/nuke",
  test_: "vitest --passWithNoTests --coverage --run",
  "test:watch": "vitest --passWithNoTests --coverage"
};
const exports = {
  ".": {
    types: "./src/index.ts",
    "import": "./dist/index.js",
    require: "./dist/index.cjs",
    "default": "./dist/index.js"
  },
  "./readme": "./readme.md"
};
const bin = {
  nuke: "./shims/nuke.js"
};
const dependencies = {
  "@alexaegis/cli-tools": "^0.7.2",
  "@alexaegis/common": "^0.7.2",
  "@alexaegis/logging": "^0.7.2",
  "@alexaegis/workspace-tools": "^0.7.2",
  globby: "^14.0.0"
};
const devDependencies = {
  "@alexaegis/eslint-config-vitest": "^0.8.4",
  "@alexaegis/ts": "^0.8.4",
  "@alexaegis/vite": "^0.8.4",
  "@alexaegis/vitest": "^0.8.4",
  "@types/node": "^20.9.0",
  publint: "^0.2.5",
  typescript: "^5.2.2",
  vite: "^4.5.0",
  vitest: "^0.34.6"
};
const packageJson = {
  name,
  description,
  version,
  license,
  "private": false,
  archetype,
  keywords,
  type,
  publishConfig,
  scripts,
  exports,
  bin,
  dependencies,
  devDependencies
};
const yarguments = YargsBuilder.withDefaults(packageJson).add(yargsForCollectWorkspacePackagesOptions).add(
  (y) => y.option("skipNodeModules", {
    boolean: true,
    description: "Don't remove `node_modules` directories but try to clean them up",
    default: false
  }).option("nukeList", {
    array: true,
    type: "string",
    description: "A list of folders and files to delete.",
    default: DEFAULT_NUKE_LIST
  }).option("nukeMore", {
    array: true,
    type: "string",
    description: "These will be nuked too. Same role as `nukeList` but defining this won't get rid of the built in nukelist"
  }).option("nukeGlobs", {
    array: true,
    type: "string",
    description: "A list of globs to also delete, not as efficient as a flat path but sometimes necessary",
    default: DEFAULT_NUKE_GLOBS
  }).option("nukeMoreGlobs", {
    array: true,
    type: "string",
    description: "Additional globs to nuke if you don't want to overwrite the default ones"
  }).option("dontNukeIn", {
    array: true,
    type: "string",
    description: "If it shouldn't nuke a specific package, add them here."
  })
).add(yargsForLogLevelOption);
void (async () => {
  const options = await yarguments.build().parseAsync();
  const logger = createLogger({ name: "nuke â˜¢", minLevel: options.logLevel });
  await nuke({ ...options, logger });
})();
