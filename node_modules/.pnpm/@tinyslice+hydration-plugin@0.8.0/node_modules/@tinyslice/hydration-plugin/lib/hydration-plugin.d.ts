import { type TinySlicePlugin, type TinySlicePluginHooks } from '@tinyslice/core';
export declare const DEFAULT_OPTIONS: HydrationPluginOptions<unknown, unknown>;
export interface Migration<OldState, NewState> {
    fromKey: string;
    toKey: string;
    migrate: (oldState: OldState, existingNewState: NewState | undefined) => NewState;
    getter?: (key: string) => OldState | undefined | null;
    setter?: (key: string, state: NewState) => void;
    remover?: (key: string) => void;
}
export interface HydrationPluginOptions<State, SavedState extends State = State> {
    trimmer: (state: State) => SavedState;
    validateRetrieved?: (state: unknown) => state is State;
    migrations: Migration<unknown, unknown>[];
    getter: (key: string) => State | undefined | null;
    setter: (key: string, state: State) => void;
    remover: (key: string) => void;
    debounceTime: number;
}
/**
 * TODO: Add plugin order constraints. Reason: hydration HAS to happen before ReduxDevtoolsPlugin OR add a REHYDRATE action when setting the latter seems simpler, OR BOTH because then the rehydrate action can be missed
 * TODO: the logger plugin should be the first
 * TODO: if the constrained plugin is also present in the plugins array and not meeting the constraint, put it where it does
 * TODO: do it until
 */
export declare class TinySliceHydrationPlugin<State, SavedState extends State = State> implements TinySlicePlugin<State> {
    private readonly localStorageKey;
    private sink;
    private options;
    private hooks;
    private additionalTriggers;
    private pipeline?;
    constructor(localStorageKey: string, options?: Partial<HydrationPluginOptions<State, SavedState>>);
    private runMigrations;
    private tryMigrations;
    retrieve(): State | undefined | null;
    persist(snapshot: State): void;
    register: (hooks: TinySlicePluginHooks<State>) => void;
    start: () => void;
    stop: () => void;
    registerAdditionalTrigger: (trigger: () => void) => void;
}
//# sourceMappingURL=hydration-plugin.d.ts.map